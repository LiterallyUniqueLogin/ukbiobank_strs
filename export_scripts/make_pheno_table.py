#!/usr/bin/env python3

import argparse
import os

import phenotypes

ukb = os.environ['UKB']

def na_check(obj):
    if obj is None:
        return 'NA'
    else:
        return obj

def generate_phenotypes_table(all_phenotypes):
    with open(f'{ukb}/export_scripts/results/phenotypes.tab', 'w') as outfile:
        outfile.write(
            'phenotype\t'
            'category\t'
            'data_field_ID\t'
            'measurement_units\t'
            'minimum_reportable_value\t'
            'n_samples_omitted_below_reportable_range\t'
            'maximum_reportable_value\t'
            'n_samples_omitted_above_reportable_range\t'
            'n_individuals_tested\t'
            'association_testing_categorical_covariates\t'
            'n_association_peaks\n'
        )
        for phenotype in all_phenotypes:
            desc = phenotypes.pheno_descs[phenotype]
            if phenotype in phenotypes.haematological_phenotypes:
                category = 'haematology'
            elif phenotype in phenotypes.serum_biomarkers:
                category = 'serum biomarker'
            else:
                assert False
            outfile.write(
                f'{phenotype}\t{category}\t{desc.data_field_id}\t{desc.unit}\t'
                f'{na_check(desc.min_val)}\t{na_check(desc.min_omit)}\t'
                f'{na_check(desc.max_val)}\t{na_check(desc.max_omit)}\t'
            )
            with open(f"sample_qc/runs/white_brits/{phenotype}/combined_unrelated.sample") as samp_file:
                n_samps = len(samp_file.readlines()) - 1
            outfile.write(f'{n_samps}\t')
            if len(desc.categorical_covars) == 0:
                outfile.write('None\t')
            else:
                outfile.write(','.join([str(covar_pair) for covar_pair in desc.categorical_covars]))
                outfile.write('\t')
            with open(f'signals/peaks/{phenotype}_500000_5e-8.tab') as peaks_file:
                n_peaks = len(peaks_file.readlines()) - 1
                outfile.write(f'{n_peaks}\n')

    with open(f'{ukb}/export_scripts/results/phenotypes_README.txt', 'w') as readme:
        readme.write('phenotype: the name of the phenotype\n')
        readme.write('category: either haematology or serum biomarker. See manuscript for more details.\n')
        readme.write('data_field_ID: the ID of the data field of this phenotype in the UKB data showcase\n')
        readme.write('measurement_units\n')
        readme.write(
            'minimum_reportable_value: for machines which had a threshold below which readings could not '
            'be taken, causing the corresponding individuals to be excluded from this phenotype\n'
        )
        readme.write('n_samples_omitted_below_reportable_range: the number of samples omitted that way\n')
        readme.write(
            'maximum_reportable_value: for machines which had a threshold above which readings could not '
            'be taken, causing the corresponding individuals to be excluded from this phenotype\n'
        )
        readme.write('n_samples_omitted_above_reportable_range: the number of samples omitted that way\n')
        readme.write(
            'n_individuals_tested: the number of individuals included in the association testing '
            'i.e. unrelated high-quality white brit samples with the phenotype\n'
        )
        readme.write(
            'association_testing_categorical_covariates: categorical covariates included in the '
            'association tests for specifically this phenotype. Pairs (covariate name, '
            'covariate data field ID)\n'
        )
        readme.write(
            'n_association_peaks: the number of peaks generated by the GWAS, using spacing=500kb and '
            'threshold=5e-8\n'
        )

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('phenotypes', nargs='+')
    args = parser.parse_args()

    generate_phenotypes_table(args.phenotypes)
