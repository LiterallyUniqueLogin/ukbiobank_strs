# See https://cromwell.readthedocs.io/en/stable/Configuring/
# only use double quotes!
include required(classpath("application"))

system {
  abort-jobs-on-terminate = true
  io {
    number-of-requests = 30
    per = 1 second
  }
}

## file based persistent database
database {
  profile = "slick.jdbc.HsqldbProfile$"
  db {
    driver = "org.hsqldb.jdbcDriver"
    url = """
    jdbc:hsqldb:file:cromwell-executions/cromwell-db/cromwell-db;
    shutdown=false;
    hsqldb.default_table_type=cached;hsqldb.tx=mvcc;
    hsqldb.result_max_memory_rows=10000;
    hsqldb.large_data=true;
    hsqldb.applog=1;
    hsqldb.lob_compressed=true;
    hsqldb.script_format=3
    """
    connectionTimeout = 120000
    numThreads = 1
   }
}

call-caching {
  enabled = true
}

docker {
  hash-lookup {
    enabled = false
    # method = "local"
  }
}

backend {
  default = "Local"
  providers {  
    Local {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {
        concurrent-job-limit = 10
        run-in-background = true
        root = "cromwell-executions"
        runtime-attributes = """
          String docker
        """
        submit = "/usr/bin/env bash ${script}"
        submit-docker = """
          echo ${script} | sed -e 's@.*cromwell-executions@/cromwell-executions@'
          singularity exec --containall --bind ${cwd}:${docker_cwd} workflow/${docker}_singularity_image.sif bash -c "conda init bash && source ~/.bashrc && conda activate ukb && python --version && source $(echo ${script} | sed -e 's@.*cromwell-executions@/cromwell-executions@') "
        """
        filesystems {
          local {
            localization: ["hard-link"]
            caching {
              duplication-strategy: ["hard-link"]
              hasing-strategy: ["fingerprint"]
            }
          }
        }
      }
    }
    SLURM {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {
        concurrent-job-limit = 500
        root = "cromwell-executions"

        runtime-attributes = """
          Int cpus = 1
          String memory = "2g"
          String dx_timeout
          String docker
        """
 
        submit = """
          # --output=logs/{job_name}/$j.out \
          sbatch \
            --account ddp268 \
            --partition ind-shared \
            --nodes 1 \
            --job-name=${job_name}-%j \
            -o ${out} -e ${err}  \
            --mail-type FAIL --mail-user jonathan.margoliash@gmail.com \
            --ntasks-per-node=${threads} \
            --mem=${memory} \
            -c ${cpus} \
            --time=${dx_timeout} \
            --parsable \
            --chdir ${cwd} \
            --wrap "/bin/bash ${script}"
        """

        submit-docker = """
          # Ensure singularity is loaded if it's installed as a module
          # module load singularitypro/3.9

          # Build the Docker image into a singularity image
          # IMAGE=${cwd}/${docker}.sif
          # singularity build $IMAGE docker://${docker}
          # --output=logs/{job_name}/$j.out \

          sbatch \
            --account ddp268 \
            --partition ind-shared \
            --nodes 1 \
            --job-name=${job_name}-%j \
            -o ${out} -e ${err}  \
            --mail-type FAIL --mail-user jonathan.margoliash@gmail.com \
            --ntasks-per-node=${threads} \
            --mem=${memory} \
            -c ${cpus} \
            --time=${dx_timeout} \
            --parsable \
            --chdir ${cwd} \
            --wrap "
              singularity exec --containall --bind ${cwd}:${docker_cwd} workflow/${docker}_singularity_image.sif bash -c \"conda init bash && source ~/.bashrc && conda activate ukb && python --version && source $(echo ${script} | sed -e 's@.*cromwell-executions@/cromwell-executions@') \"
            "
        """

        kill = "scancel ${job_id}"
        check-alive = "squeue -j ${job_id}"
        job-id-regex = "Submitted batch job (\\d+).*"

        filesystems {
          SLURM {
            localization: ["hard-link"]
            caching {
              duplication-strategy: ["hard-link"]
              hasing-strategy: ["fingerprint"]
            }
          }
        }

      }
    }
}}
