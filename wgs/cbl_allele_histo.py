#!/usr/bin/env python3

import argparse

import bokeh.io
import bokeh.models
import bokeh.palettes
import bokeh.plotting
import cyvcf2
import numpy as np

import trtools.utils.tr_harmonizer as trh

parser = argparse.ArgumentParser()
#parser.add_argument('vcf')
#parser.add_argument('samples', nargs=4)
parser.add_argument('outprefix')
args = parser.parse_args()

#chrom = 'chr11'
#pos = 119206290
#vcf = cyvcf2.VCF(args.vcf)
#
#sampless = []
#for sample_list in args.samples:
#    sampless.append(np.isin(vcf.samples, [line.split('_')[0] for line in open(sample_list).readlines()]))
#    assert np.sum(sampless[-1]) > 100
#
#var = next(vcf(f'{chrom}:{pos}'))
#rec = trh.HarmonizeRecord('hipstr', var)
#gts = rec.GetLengthGenotypes()[:, :-1]
#seqs = rec.GetStringGenotypes()[:, :-1]
#
ethnicities = ('white_brits', 'black', 'south_asian', 'chinese')
#ethnic_freqs = {}
#for ethnicity, samples in zip(ethnicities, sampless):
#    ethnic_freqs[ethnicity] = {}
#    ethnic_seqs = seqs[samples, :]
#    ethnic_gts = gts[samples, :]
#    ethnic_seqs = ethnic_seqs[ethnic_gts > 0]
#    ethnic_gts = ethnic_gts[ethnic_gts > 0]
#    ethnic_gts = ethnic_gts[ethnic_seqs != '.']
#    ethnic_seqs = ethnic_seqs[ethnic_seqs != '.']
#    for length in np.unique(ethnic_gts):
#        ethnic_freqs[ethnicity][length] = {}
#        ethnic_freqs[ethnicity][length][0] = np.sum((ethnic_gts == length) & (np.char.find(ethnic_seqs, 'T', start=3) != 3))/ethnic_gts.size
#        ethnic_freqs[ethnicity][length][1] = np.sum((ethnic_gts == length) & (np.char.find(ethnic_seqs, 'T', start=3) == 3))/ethnic_gts.size
#        if not np.isclose(length, round(length) + 1/3):
#            assert sum(ethnic_freqs[ethnicity][length].values()) < 0.01, (length, ethnic_freqs[ethnicity][length])
#print(repr(ethnic_freqs))

ethnic_freqs = {'white_brits': {3.3333333333333335: {0: 3.940289459725695e-05, 1: 0.0}, 4.333333333333333: {0: 6.971281351822384e-05, 1: 6.061983784193377e-06}, 5.333333333333333: {0: 0.0005001136621959536, 1: 5.4557854057740395e-05}, 6.333333333333333: {0: 0.000681973175721755, 1: 3.940289459725695e-05}, 7.333333333333333: {0: 0.002909752216412821, 1: 1.2123967568386754e-05}, 8.333333333333334: {0: 0.0024763203758429945, 1: 0.00012427066757596424}, 9.333333333333334: {0: 0.0003970599378646662, 1: 8.18367810866106e-05}, 10.333333333333334: {0: 0.0010608471622338411, 1: 0.0003182541486701523}, 11.0: {0: 3.0309918920966885e-06, 1: 0.0}, 11.333333333333334: {0: 0.5015897552474047, 1: 0.19437144805637646}, 12.333333333333334: {0: 0.09671288929302115, 1: 0.0029734030461468514}, 13.0: {0: 1.2123967568386754e-05, 1: 0.0}, 13.333333333333334: {0: 0.07595059483215882, 1: 0.0021156323406834885}, 13.666666666666666: {0: 6.061983784193377e-06, 1: 0.0}, 14.333333333333334: {0: 0.02574827612336137, 1: 0.041600363719027054}, 15.333333333333334: {0: 0.005819504432825642, 1: 0.0018670910055315602}, 16.333333333333332: {0: 0.004443434113813745, 1: 0.0012517996514359324}, 17.333333333333332: {0: 0.0025157232704402514, 1: 0.018313253012048194}, 18.333333333333332: {0: 0.0010275062514207775, 1: 0.0015276199136167311}, 19.333333333333332: {0: 0.0011911798135939987, 1: 0.0012578616352201257}, 20.333333333333332: {0: 0.0008153368189740092, 1: 0.001985299689323331}, 21.333333333333332: {0: 0.0006759111919375616, 1: 0.0009214215351973933}, 22.333333333333332: {0: 0.0007547169811320754, 1: 0.0008577707054633629}, 23.333333333333332: {0: 0.0005031446540880503, 1: 0.0006759111919375616}, 24.333333333333332: {0: 0.0006456012730165947, 1: 0.00036068803515950596}, 25.333333333333332: {0: 0.0004698037432749867, 1: 0.0002606653027203152}, 26.333333333333332: {0: 0.00038493597029627945, 1: 0.00019398348109418806}, 27.333333333333332: {0: 0.00036978101083579604, 1: 0.00016973554595741457}, 28.333333333333332: {0: 0.00023338637569144503, 1: 0.00011820868379177086}, 29.333333333333332: {0: 0.00025763431082821854, 1: 1.8185951352580132e-05}, 30.333333333333332: {0: 9.699174054709403e-05, 1: 2.121694324467682e-05}, 31.333333333333332: {0: 5.4557854057740395e-05, 1: 6.061983784193377e-06}, 32.333333333333336: {0: 4.243388648935364e-05, 1: 1.2123967568386754e-05}, 33.333333333333336: {0: 1.5154959460483444e-05, 1: 0.0}, 36.333333333333336: {0: 6.061983784193377e-06, 1: 0.0}, 37.333333333333336: {0: 3.0309918920966885e-06, 1: 0.0}}, 'black': {3.3333333333333335: {0: 0.00017241379310344826, 1: 0.0}, 4.333333333333333: {0: 0.0008620689655172414, 1: 0.0}, 5.333333333333333: {0: 0.001379310344827586, 1: 0.0}, 6.333333333333333: {0: 0.0008620689655172414, 1: 0.00017241379310344826}, 7.333333333333333: {0: 0.003103448275862069, 1: 0.00017241379310344826}, 8.333333333333334: {0: 0.14275862068965517, 1: 0.017241379310344827}, 9.333333333333334: {0: 0.002413793103448276, 1: 0.0}, 10.333333333333334: {0: 0.056896551724137934, 1: 0.0008620689655172414}, 11.333333333333334: {0: 0.448448275862069, 1: 0.13896551724137932}, 12.333333333333334: {0: 0.05, 1: 0.06586206896551725}, 13.333333333333334: {0: 0.044137931034482755, 1: 0.001206896551724138}, 14.333333333333334: {0: 0.0034482758620689655, 1: 0.010172413793103447}, 15.333333333333334: {0: 0.001379310344827586, 1: 0.0003448275862068965}, 16.333333333333332: {0: 0.0005172413793103448, 1: 0.0003448275862068965}, 17.333333333333332: {0: 0.0010344827586206897, 1: 0.0029310344827586207}, 18.333333333333332: {0: 0.0008620689655172414, 1: 0.0003448275862068965}, 19.333333333333332: {0: 0.0003448275862068965, 1: 0.0005172413793103448}, 20.333333333333332: {0: 0.0003448275862068965, 1: 0.0008620689655172414}, 21.333333333333332: {0: 0.0003448275862068965, 1: 0.00017241379310344826}, 24.333333333333332: {0: 0.00017241379310344826, 1: 0.0}, 25.333333333333332: {0: 0.00017241379310344826, 1: 0.0}, 26.333333333333332: {0: 0.0, 1: 0.00017241379310344826}}, 'south_asian': {5.333333333333333: {0: 0.00015015015015015014, 1: 0.0}, 6.333333333333333: {0: 0.0003003003003003003, 1: 0.0}, 7.333333333333333: {0: 0.0006006006006006006, 1: 0.0006006006006006006}, 8.333333333333334: {0: 0.002702702702702703, 1: 0.00045045045045045046}, 9.333333333333334: {0: 0.0007507507507507507, 1: 0.0009009009009009009}, 10.333333333333334: {0: 0.0013513513513513514, 1: 0.0007507507507507507}, 11.333333333333334: {0: 0.3165165165165165, 1: 0.2599099099099099}, 12.333333333333334: {0: 0.07117117117117117, 1: 0.007057057057057057}, 13.333333333333334: {0: 0.027327327327327327, 1: 0.027177177177177176}, 14.333333333333334: {0: 0.002702702702702703, 1: 0.15990990990990991}, 15.333333333333334: {0: 0.0016516516516516516, 1: 0.024624624624624624}, 16.333333333333332: {0: 0.004054054054054054, 1: 0.013213213213213212}, 17.333333333333332: {0: 0.0013513513513513514, 1: 0.013813813813813814}, 18.333333333333332: {0: 0.0007507507507507507, 1: 0.01036036036036036}, 19.333333333333332: {0: 0.0006006006006006006, 1: 0.00990990990990991}, 20.333333333333332: {0: 0.0003003003003003003, 1: 0.008258258258258258}, 21.333333333333332: {0: 0.0012012012012012011, 1: 0.007207207207207207}, 22.333333333333332: {0: 0.0006006006006006006, 1: 0.004204204204204204}, 23.333333333333332: {0: 0.0003003003003003003, 1: 0.002702702702702703}, 24.333333333333332: {0: 0.0009009009009009009, 1: 0.0024024024024024023}, 25.333333333333332: {0: 0.00045045045045045046, 1: 0.0016516516516516516}, 26.333333333333332: {0: 0.00045045045045045046, 1: 0.002852852852852853}, 27.333333333333332: {0: 0.00015015015015015014, 1: 0.001951951951951952}, 28.333333333333332: {0: 0.0003003003003003003, 1: 0.0018018018018018018}, 29.333333333333332: {0: 0.00045045045045045046, 1: 0.0007507507507507507}, 30.333333333333332: {0: 0.0, 1: 0.0003003003003003003}, 32.333333333333336: {0: 0.0, 1: 0.00015015015015015014}}, 'chinese': {7.333333333333333: {0: 0.0032733224222585926, 1: 0.007364975450081833}, 8.333333333333334: {0: 0.019639934533551555, 1: 0.0}, 9.333333333333334: {0: 0.0008183306055646482, 1: 0.0008183306055646482}, 10.333333333333334: {0: 0.0032733224222585926, 1: 0.0032733224222585926}, 11.333333333333334: {0: 0.3895253682487725, 1: 0.2888707037643208}, 12.333333333333334: {0: 0.05155482815057283, 1: 0.04828150572831424}, 13.333333333333334: {0: 0.00900163666121113, 1: 0.0057283142389525366}, 14.333333333333334: {0: 0.0024549918166939444, 1: 0.010638297872340425}, 15.333333333333334: {0: 0.0008183306055646482, 1: 0.07119476268412439}, 16.333333333333332: {0: 0.0, 1: 0.0220949263502455}, 17.333333333333332: {0: 0.0008183306055646482, 1: 0.010638297872340425}, 18.333333333333332: {0: 0.0, 1: 0.015548281505728314}, 19.333333333333332: {0: 0.0016366612111292963, 1: 0.004091653027823241}, 20.333333333333332: {0: 0.0016366612111292963, 1: 0.00900163666121113}, 21.333333333333332: {0: 0.0, 1: 0.0032733224222585926}, 22.333333333333332: {0: 0.0, 1: 0.0032733224222585926}, 23.333333333333332: {0: 0.0, 1: 0.0024549918166939444}, 24.333333333333332: {0: 0.0, 1: 0.0032733224222585926}, 25.333333333333332: {0: 0.0, 1: 0.0024549918166939444}, 28.333333333333332: {0: 0.0008183306055646482, 1: 0.0016366612111292963}, 29.333333333333332: {0: 0.0, 1: 0.0008183306055646482}}}

new_ethnic_freqs = {}
for ethnicity in ethnic_freqs:
    new_ethnic_freqs[ethnicity] = {}
    for len_ in ethnic_freqs[ethnicity]:
        new_ethnic_freqs[ethnicity][round(len_)] = {}
        new_ethnic_freqs[ethnicity][round(len_)][0] = ethnic_freqs[ethnicity][len_][0]
        new_ethnic_freqs[ethnicity][round(len_)][1] = ethnic_freqs[ethnicity][len_][1]

ethnic_freqs = new_ethnic_freqs
lens = np.unique([len_ for freqs in ethnic_freqs.values() for len_ in freqs])

min_len = min(len_ for len_ in lens if any(sum(ethnic_freqs[ethnicity][len_].values()) > 0.01 for ethnicity in ethnicities if len_ in ethnic_freqs[ethnicity]))
max_len = max(len_ for len_ in lens if any(sum(ethnic_freqs[ethnicity][len_].values()) > 0.01 for ethnicity in ethnicities if len_ in ethnic_freqs[ethnicity]))
cats = [(str(len_), ethnicity) for len_ in np.arange(min_len, max_len + 1) for ethnicity in ethnicities]

fig = bokeh.plotting.figure(
    width= 1600,
    height = 900,
    y_axis_label = 'Allele frequency',
    x_axis_label = 'Allele length',
    x_range = bokeh.models.FactorRange(*cats),
    output_backend = 'svg'
)
fig.axis.axis_label_text_font_size = '30px'
fig.axis.major_label_text_font_size = '24px'
fig.xaxis.group_text_font_size = '24px'
fig.xaxis.subgroup_text_font_size = '24px'
fig.xgrid.grid_line_color = None
fig.xaxis.major_label_text_color = None
fig.xaxis.major_tick_line_color = None
fig.toolbar_location = None

cds = bokeh.models.ColumnDataSource(dict(
    x=cats,
    subcats=list(eth.replace('brits', 'british').replace('_', ' ').title() for eth in ethnicities)*round(max_len - min_len + 1),
    perfect=  [ethnic_freqs[ethnicity][int(len_)][0] if int(len_) in ethnic_freqs[ethnicity] else 0 for (len_, ethnicity) in cats],
    imperfect=[ethnic_freqs[ethnicity][int(len_)][1] if int(len_) in ethnic_freqs[ethnicity] else 0 for (len_, ethnicity) in cats],
))
types = ['perfect', 'imperfect']
fig.vbar_stack(
    types,
    x='x',
    width = 0.9,
    hatch_pattern = [' ', '/'],
    fill_color = bokeh.transform.factor_cmap('x', palette=bokeh.palettes.Colorblind[len(ethnicities)], factors=ethnicities, start=1, end=2),
    legend_group = 'subcats',
    source=cds
)

fig.legend[0].items.insert(0, fig.legend[0].items[3])
del fig.legend[0].items[4]
fig.legend[0].items.insert(2, fig.legend[0].items[3])
del fig.legend[0].items[4]

# remove the legends for  imperfections
for _ in ethnicities:
    del fig.legend[0].items[len(ethnicities)]
fig.legend[0].items.insert(0, fig.legend[0].items[3])
del fig.legend[0].items[4]
fig.legend[0].items.insert(4, fig.legend[0].items[2])
del fig.legend[0].items[2]

# plot again, but legend for imperfections
# since the plots perfectly overlap, shouldn't be an issue
fig.vbar_stack(
    types,
    x='x',
    width = 0.9,
    hatch_pattern = [' ', '/'],
    fill_color = bokeh.transform.factor_cmap('x', palette=bokeh.palettes.Colorblind[len(ethnicities)], factors=ethnicities, start=1, end=2),
    legend_label = types,
    source=cds
)

fig.legend.label_text_font_size = '30px'

bokeh.io.export_png(fig, filename=f'{args.outprefix}.png')
bokeh.io.export_svg(fig, filename=f'{args.outprefix}.svg')
