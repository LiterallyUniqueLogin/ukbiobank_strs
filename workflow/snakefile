import collections

import numpy as np
import shutil

chr_lens = np.genfromtxt(
    f'misc_data/genome/chr_lens.txt',
    usecols=[1],
    skip_header=1,
    dtype=int
)

class PhenotypeLoadingArg:
    def __init__(self, data_field_id, age, *, unit = 'binary'):
        self.data_field_id = data_field_id
        self.age = age
        self.unit = unit

pheno_args = {
    'height': PhenotypeLoadingArg(
        '50',
        'first-available',
        unit = 'cm'
    ),
    'total_bilirubin': PhenotypeLoadingArg(
        '30840',
        'first-available',
        unit = 'umol/L'
    ),
    'education_score_england': PhenotypeLoadingArg(
        '26414',
        'init-assessment',
        unit = 'English IMD Units'
    ),
    'fluid_intelligence_score': PhenotypeLoadingArg(
        '20016',
        'first-available',
        unit = 'Correct Answers'
    ),
    'inpatient_ICD10_main_diagnoses' : PhenotypeLoadingArg(
        '41202',
        'tbd'
    ),
    'tower_rearranging_correct' : PhenotypeLoadingArg(
        '21004',
        'first-available',
        unit = 'Correct Answers'
    ),
    's_word_count_pilot' : PhenotypeLoadingArg(
        '10612',
        'init-assessment',
        unit = 'Words Produced'
    )
}

rule load_shared_covars:
    output:
        protected("traits/shared_covars/shared_covars.npy"),
        protected("traits/shared_covars/assessment_ages.npy"),
        protected("traits/shared_covars/README.txt"),
        protected("traits/shared_covars/covar_names.txt")
    shell:
        "traits/load_shared_covars.py"

rule decompress_phenotype:
    output:
        protected("main_dataset/extracted_data/{phenotype}.txt"),
        protected("main_dataset/extracted_data/{phenotype}_README.txt")
    run:
        phenotype = wildcards.phenotype
        args = pheno_args[phenotype]
        shell(
            "main_dataset/decompress_trait.py "
            f"{phenotype} {args.data_field_id} "
        )

rule load_phenotype:
    input:
        "main_dataset/extracted_data/{phenotype}.txt"
        "traits/shared_covars/shared_covars.npy"
    output:
        protected("traits/phenotypes/{phenotype}.npy"),
        protected("traits/phenotypes/{phenotype}_README.txt"),
        protected("traits/phenotypes/{phenotype}_unit.txt"),
        protected("traits/phenotypes/{phenotype}_covar_names.txt")
    run:
        phenotype = wildcards.phenotype
        if phenotype in pheno_args:
            args = pheno_args[phenotype]
            assert args.unit != 'binary'
            shell(
                f"traits/load_trait_from_main_dataset.py "
                f"{phenotype} '{args.unit}' {args.age} "
            )
        else:
            raise ValueError(f"Couldn't identify phenotype {phenotype}")

rule plot_phenotype_by_sex:
    input:
        "traits/shared_covars/shared_covars.npy",
        "traits/phenotypes/{phenotype}.npy",
        "traits/phenotypes/{phenotype}_unit.txt"
    output:
        "traits/phenotypes/{phenotype}_distribution_by_sex.png"
    shell:
        'traits/plot_phenotype.py {wildcards.phenotype} sex'

rule plot_phenotype_by_age:
    input:
        "traits/phenotypes/{phenotype}.npy",
        "traits/phenotypes/{phenotype}_unit.txt"
    output:
        "traits/phenotypes/{phenotype}_distribution_by_age.png"
    shell:
        'traits/plot_phenotype.py {wildcards.phenotype} age'

rule subset_samples_for_phenotype:
    input:
        "traits/phenotypes/{phenotype}.npy",
        expand("sample_qc/common_filters/keep"),
        expand("sample_qc/common_filters/remove"),
        "misc_data/ukbgene/ukb46122_rel_s488282.dat"
    output:
        protected("sample_qc/runs/{phenotype}/README.txt"),
        protected("sample_qc/runs/{phenotype}/combined_unrelated.sample")
    shadow: 'minimal'
    shell:
        'shadow_dir=$(pwd) ; cd $UKB ; export UKB=${{shadow_dir}} ; '
        'sample_qc/scripts/combine.py {wildcards.phenotype} && '
        'PHEN={wildcards.phenotype} sample_qc/scripts/test_combine.sh && '
        'sample_qc/scripts/unrelated_individuals.py {wildcards.phenotype} && '
        'sample_qc/scripts/verify_unrelatedness.py {wildcards.phenotype}'

rule rank_inverse_normalize_phenotype_subset:
    input:
        "traits/phenotypes/{phenotype}.npy",
        "sample_qc/runs/{phenotype}/combined_unrelated.sample"
    output:
        protected("traits/subset_rin_phenotypes/{phenotype}_README.txt"),
        "traits/subset_rin_phenotypes/{phenotype}.npy"
    shell:
        'traits/rank_inverse_normalize.py {wildcards.phenotype}'

def concatenate_csvs(output_file, input_files):
    with open(output_file + '.temp', 'w') as outfile:
        first = True
        for f in input_files:
            with open(f) as infile:
                first_line = True
                for line in infile:
                    if first_line and first:
                        first = False
                        first_line = False
                        outfile.write(line)
                        continue
                    elif first_line and not first:
                        first_line = False
                        continue
                    outfile.write(line)
    shutil.move(output_file + '.temp', output_file)

def regions(region_len):
    regions = []
    for chrom in range(1, 23):
        chr_len = chr_lens[chrom-1]
        for start in range(1, chr_len, region_len):
            if start + region_len - 1 > chr_len:
                end = chr_len
            else:
                end = start + region_len - 1
            regions.append(f'{chrom}_{start}_{end}')
    return regions

rule write_my_imputed_snp_gwas_readme:
    output:
        protected('association/results/{phenotype}/my_imputed_snp/README.txt'),
        protected('association/results/{phenotype}/my_imputed_snp/time.stamp')
    shell:
        'touch association/results/{wildcards.phenotype}/my_imputed_snp/time.stamp && '
        'association/my_regional_gwas.py imputed-snps {wildcards.phenotype} --readme'

rule run_regional_my_imputed_snp_gwas:
    input:
        "traits/phenotypes/{phenotype}.npy",
        'association/results/{phenotype}/my_imputed_snp/time.stamp',
        "traits/subset_rin_phenotypes/{phenotype}.npy"
    output:
        "association/results/{phenotype}/my_imputed_snp/batches/chr{chr}_{start}_{end}.tab"
    shell:
        'association/my_regional_gwas.py imputed-snps {wildcards.phenotype} '
        '--region {wildcards.chr}:{wildcards.start}-{wildcards.end}'

rule concatenate_my_imputed_snp_gwas_chr21:
    input:
        lambda wildcards:
            [f'association/results/{wildcards.phenotype}/my_imputed_snp/batches/chr{region}.tab' for
             region in regions(int(1e5)) if region[:3] == '21_']
    output:
        protected('association/results/{phenotype}/my_imputed_snp/chr21_results.tab')
    run:
        concatenate_csvs(output[0], input)

str_imputation_run_name = 'first_pass'

rule write_my_str_gwas_readme:
    output:
        protected('association/results/{phenotype}/my_str/README.txt'),
        protected('association/results/{phenotype}/my_str/time.stamp')
    shell:
        'touch association/results/{wildcards.phenotype}/my_str/time.stamp && '
        'association/my_regional_gwas.py strs {wildcards.phenotype} --readme '
        f'--imputation-run-name {str_imputation_run_name} '

rule run_regional_my_str_gwas:
    input:
        "traits/phenotypes/{phenotype}.npy",
        'association/results/{phenotype}/my_str/time.stamp',
        "traits/subset_rin_phenotypes/{phenotype}.npy",
        f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chr}}.vcf.gz",
        f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chr}}.vcf.gz.tbi"
    output:
        "association/results/{phenotype}/my_str/batches/chr{chr}_{start}_{end}.tab"
    shell:
        'association/my_regional_gwas.py strs {wildcards.phenotype} '
        '--region {wildcards.chr}:{wildcards.start}-{wildcards.end} '
        f'--imputation-run-name {str_imputation_run_name} '

rule concatenate_my_str_gwas:
    input:
        lambda wildcards:
            [f'association/results/{wildcards.phenotype}/my_str/batches/chr{region}.tab' for
             region in regions(int(1e7))]
    output:
        protected('association/results/{phenotype}/my_str/results.tab')
    run:
        concatenate_csvs(output[0], input)

rule prep_plink_input:
    input:
        'traits/shared_covars/shared_covars.npy',
        'traits/shared_covars/covar_names.txt',
        'traits/subset_rin_phenotypes/{phenotype}.npy',
        'traits/phenotypes/{phenotype}_covar_names.txt'
    output:
        'association/results/{phenotype}/plink_snp/input/rin_phenotype_and_covars.tab'
    shell:
        'association/prep_plink_input.py {wildcards.phenotype}'

rule timestamp_plink_run:
    output:
        'association/results/{phenotype}/plink_snp/time.stamp'
    shell:
        'touch association/results/{wildcards.phenotype}/plink_snp/time.stamp'

rule run_plink_gwas:
    input:
        'association/results/{phenotype}/plink_snp/input/rin_phenotype_and_covars.tab',
        'association/results/{phenotype}/plink_snp/time.stamp'
    output:
        'association/results/{phenotype}/plink_snp/chrs/chr{chrom}/plink2.rin_{phenotype}.glm.linear.done'
    shell:
        'PHENOTYPE={wildcards.phenotype} CHROM={wildcards.chrom} association/plink_association.sh'

rule concatenate_plink_gwas:
    input:
        lambda wildcards:
            [f'association/results/{wildcards.phenotype}/plink_snp/chrs/chr{chrom}/plink2.rin_{wildcards.phenotype}.glm.linear.done' for
             chrom in range(1, 23)]
    output:
        protected('association/results/{phenotype}/plink_snp/results.tab')
    run:
        concatenate_csvs(output[0], input)

rule prep_conditional_input:
    output:
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP.npy',
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP_varnames.txt',
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP_README.txt'
    run:
        command = 'association/prep_conditional_inputs.py {wildcards.phenotype} {wildcards.chr} '
        if wildcards.STRs:
            command += f'--imputation-run-name {str_imputation_run_name} --STRs ' 
            command += wildcards.STRs.replace('_', ' ') + ' '
        if wildcards.imputed_SNPs:
            command += '--imputed-SNPs '
            command += wildcards.imputed_SNPs.replace('_', ' ') + ' '
        shell(command)

rule run_conditional_my_str_gwas:
    input:
        "traits/phenotypes/{phenotype}.npy",
        "traits/subset_rin_phenotypes/{phenotype}.npy",
        f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chr}}.vcf.gz",
        f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chr}}.vcf.gz.tbi",
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs}__ISNP{imputed_SNPs}__ASNP.npy',
    output:
        'association/results/{phenotype}/my_str_conditional/chr{chr}_{start}_{end}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP.tab'
    shell:
        'association/my_regional_gwas.py strs {wildcards.phenotype} '
        '--region {wildcards.chr}:{wildcards.start}-{wildcards.end} '
        f'--imputation-run-name {str_imputation_run_name} '
        '--conditional STR{wildcards.STRs}__ISNP{wildcards.imputed_SNPs}__ASNP'

rule prep_conditional_plink_input:
    input:
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs}__ISNP{imputed_SNPs}__ASNP.npy',
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs}__ISNP{imputed_SNPs}__ASNP_varnames.txt',
        'traits/shared_covars/shared_covars.npy',
        'traits/shared_covars/covar_names.txt',
        'traits/subset_rin_phenotypes/{phenotype}.npy',
        'traits/phenotypes/{phenotype}_covar_names.txt'
    output:
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP_plink.tab'
    shell:
        'association/prep_plink_input.py {wildcards.phenotype} --conditional chr{wildcards.chr}_STR{wildcards.STRs}__ISNP{wildcards.imputed_SNPs}__ASNP'

rule run_conditional_plink_gwas:
    input:
        'association/results/{phenotype}/conditional_inputs/chr{chrom}_STR{STRs}__ISNP{ISNPs}__ASNP_plink.tab'
    output:
        'association/results/{phenotype}/plink_snp_conditional/chr{chrom}_{start}_{end}_STR{STRs,.*}__ISNP{ISNPs,.*}__ASNP/plink2.rin_{phenotype}.glm.linear.done'
    shell:
        'PHENOTYPE={wildcards.phenotype} CHROM={wildcards.chrom} '
        'CONDITIONAL=STR{wildcards.STRs}__ISNP{wildcards.ISNPs}__ASNP '
        'START={wildcards.start} END={wildcards.end} '
        'association/plink_association.sh'

INTERACTIVE_MANHATTAN_GWAS_THRESHOLD = 0.00005

def subset_gwas_results(
        input_file,
        output_file,
        p_val_col,
        threshold = INTERACTIVE_MANHATTAN_GWAS_THRESHOLD):
    shell(
        f"head -n 1 {input_file} > {output_file}.temp && "
        "awk '{{ if ($" + str(p_val_col) + " < " + str(threshold) + ") {{ print }} }}' "
        f"{input_file} >> {output_file}.temp && "
        f"mv {output_file}.temp {output_file} "
    )


rule subset_my_gwas_results:
    input:
        'association/results/{phenotype}/my_{gwas_type}/{chr_prefix}results.tab'
    output:
        'association/plots/input/{phenotype}/my_{gwas_type}_{chr_prefix,.*}results.tab'
    run:
        subset_gwas_results(
             f"association/results/{wildcards.phenotype}/my_{wildcards.gwas_type}/{wildcards.chr_prefix}results.tab",
             f"association/plots/input/{wildcards.phenotype}/my_{wildcards.gwas_type}_{wildcards.chr_prefix}results.tab",
             5
         )

rule subset_plink_gwas_results:
    input:
        'association/results/{phenotype}/plink_snp/results.tab'
    output:
        'association/plots/input/{phenotype}/plink_snp_results.tab'
    run:
        subset_gwas_results(
             f"association/results/{wildcards.phenotype}/plink_snp/results.tab",
             f"association/plots/input/{wildcards.phenotype}/plink_snp_results.tab",
             14
        )

rule subset_conditional_my_str_gwas_results:
    input:
        'association/results/{phenotype}/my_str_conditional/{condition}.tab'
    output:
        'association/plots/input/{phenotype}/my_str_conditional_{condition}_results.tab'
    run:
        subset_gwas_results(
             f'association/results/{wildcards.phenotype}/my_str_conditional/{wildcards.condition}.tab',
             f'association/plots/input/{wildcards.phenotype}/my_str_conditional_{wildcards.condition}_results.tab',
             5
         )

rule subset_conditional_plink_gwas_results:
    input:
        'association/results/{phenotype}/plink_snp_conditional/{condition}/plink2.rin_{phenotype}.glm.linear.done'
    output:
        'association/plots/input/{phenotype}/plink_snp_conditional_{condition}_results.tab'
    run:
        subset_gwas_results(
             f'association/results/{wildcards.phenotype}/plink_snp_conditional/{wildcards.condition}/plink2.rin_{wildcards.phenotype}.glm.linear.done',
             f'association/plots/input/{wildcards.phenotype}/plink_snp_conditional_{wildcards.condition}_results.tab',
             14
         )

rule compare_my_to_plink_gwas:
    input:
        "traits/phenotypes/height_unit.txt",
        'association/plots/input/height/my_imputed_snp_chr21_results.tab',
        'association/plots/input/height/plink_snp_results.tab'
    output:
        'association/plots/height_my_imputed_snp_vs_plink.html'
    shell:
        'association/interactive_manhattan_plots.py --my-plink-comparison'

rule interactive_manhattan:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        'association/plots/input/{phenotype}/my_str_results.tab',
        'association/plots/input/{phenotype}/plink_snp_results.tab'
    output:
        'association/plots/{phenotype}_interactive_manhattan.html'
    shell:
        'association/interactive_manhattan_plots.py --phenotype {wildcards.phenotype}'

rule interactive_manhattan_conditional:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        'association/plots/input/{phenotype}/plink_snp_conditional_{condition}_results.tab',
        'association/plots/input/{phenotype}/my_str_conditional_{condition}_results.tab'
    output:
        'association/plots/{phenotype}_interactive_manhattan_{condition}.html'
    shell:
        'association/interactive_manhattan_plots.py --phenotype {wildcards.phenotype} '
        '--condition {wildcards.condition} '

phenotypes = ['height', 'total_bilirubin']
