import numpy as np
import shutil

chr_lens = np.genfromtxt(
    f'misc_data/genome/chr_lens.txt',
    usecols=[1],
    skip_header=1,
    dtype=int
)

rule load_shared_covars:
    output:
        protected("traits/shared_covars/shared_covars.npy"),
        protected("traits/shared_covars/README.txt"),
        protected("traits/shared_covars/covar_names.txt")
    shell:
        "traits/load_shared_covars.py"

rule load_phenotype:
    input:
        "traits/shared_covars/shared_covars.npy"
    output:
        protected("traits/phenotypes/{phenotype}.npy"),
        protected("traits/phenotypes/{phenotype}_README.txt"),
        protected("traits/phenotypes/{phenotype}_unit.txt"),
        protected("traits/phenotypes/{phenotype}_covar_names.txt")
    shell:
        "traits/load_{wildcards.phenotype}.py"

rule plot_phenotype_by_sex:
    input:
        "traits/shared_covars/shared_covars.npy",
        "traits/phenotypes/{phenotype}.npy",
        "traits/phenotypes/{phenotype}_unit.txt"
    output:
        "traits/phenotypes/{phenotype}_distribution_by_sex.png"
    shell:
        'traits/plot_phenotype.py {wildcards.phenotype} sex'

rule plot_phenotype_by_age:
    input:
        "traits/phenotypes/{phenotype}.npy",
        "traits/phenotypes/{phenotype}_unit.txt"
    output:
        "traits/phenotypes/{phenotype}_distribution_by_age.png"
    shell:
        'traits/plot_phenotype.py {wildcards.phenotype} age'

rule subset_samples_for_phenotype:
    input:
        "traits/phenotypes/{phenotype}.npy",
        expand("sample_qc/common_filters/keep"),
        expand("sample_qc/common_filters/remove"),
        "misc_data/ukbgene/ukb46122_rel_s488282.dat"
    output:
        protected("sample_qc/runs/{phenotype}/README.txt"),
        protected("sample_qc/runs/{phenotype}/combined_unrelated.sample")
    shadow: 'minimal'
    shell:
        'shadow_dir=$(pwd) ; cd $UKB ; export UKB=${{shadow_dir}} ; '
        'sample_qc/scripts/combine.py {wildcards.phenotype} && '
        'PHEN={wildcards.phenotype} sample_qc/scripts/test_combine.sh && '
        'sample_qc/scripts/unrelated_individuals.py {wildcards.phenotype} && '
        'sample_qc/scripts/verify_unrelatedness.py {wildcards.phenotype}'

rule rank_inverse_normalize_phenotype_subset:
    input:
        "traits/phenotypes/{phenotype}.npy",
        "sample_qc/runs/{phenotype}/combined_unrelated.sample"
    output:
        protected("traits/subset_rin_phenotypes/{phenotype}_README.txt"),
        "traits/subset_rin_phenotypes/{phenotype}.npy"
    shell:
        'traits/rank_inverse_normalize.py {wildcards.phenotype}'

rule regress_out_covariates_linearly:
    input:
        "traits/shared_covars/shared_covars.npy",
        "traits/shared_covars/covar_names.txt",
        "traits/subset_rin_phenotypes/{phenotype}.npy",
        "traits/phenotypes/{phenotype}_covar_names.txt"
    output:
        protected("traits/adjusted_srin_phenotypes/{phenotype}_linear_README.txt"),
        protected("traits/adjusted_srin_phenotypes/{phenotype}_linear.npy"),
    shell:
        'traits/regress_out_covariates.py linear {wildcards.phenotype}'

def concatenate_csvs(output_file, input_files):
    with open(output_file + '.temp', 'w') as outfile:
        first = True
        for f in input_files:
            with open(f) as infile:
                first_line = True
                for line in infile:
                    if first_line and first:
                        first = False
                        first_line = False
                        outfile.write(line)
                        continue
                    elif first_line and not first:
                        first_line = False
                        continue
                    outfile.write(line)
    shutil.rename(output_file + '.temp', output_file)

def regions(region_len):
    regions = []
    for chrom in range(1, 23):
        chr_len = chr_lens[chrom-1]
        for start in range(1, chr_len, region_len):
            if start + region_len - 1 > chr_len:
                end = chr_len
            else:
                end = start + region_len - 1
            regions.append(f'{chrom}_{start}_{end}')
    return regions

'''
rule write_my_snp_gwas_readme:
    output:
        protected('association/results/{phenotype}/my_imputed_snp/README.txt'),
        protected('association/results/{phenotype}/my_imputed_snp/time.stamp')
    shell:
        'touch association/results/{wildcards.phenotype}/my_imputed_snp/time.stamp && '
        'association/my_regional_gwas.py imputed-snps {wildcards.phenotype} --readme'


rule run_regional_my_snp_gwas:
    input:
        "traits/phenotypes/{phenotype}.npy",
        'association/results/{phenotype}/my_imputed_snp/time.stamp',
        "traits/adjusted_srin_phenotypes/{phenotype}_linear.npy"
    output:
        "association/results/{phenotype}/my_imputed_snp/batches/chr{chr}_{start}_{end}.tab"
    shell:
        'association/my_regional_gwas.py imputed-snps {wildcards.phenotype} '
        '--region {wildcards.chr}:{wildcards.start}-{wildcards.end}'

rule concatenate_my_snp_gwas:
    input:
        lambda wildcards:
            [f'association/results/{wildcards.phenotype}/my_imputed_snp/batches/chr{region}.tab' for
             region in regions(int(1e6))]
    output:
        protected('association/results/{phenotype}/my_imputed_snp/results.tab')
    run:
        concatenate_csvs(output[0], input)
'''

str_imputation_run_name = 'first_pass'

rule write_my_str_gwas_readme:
    output:
        protected('association/results/{phenotype}/my_str/README.txt'),
        protected('association/results/{phenotype}/my_str/time.stamp')
    shell:
        'touch association/results/{wildcards.phenotype}/my_str/time.stamp && '
        'association/my_regional_gwas.py strs {wildcards.phenotype} --readme '
        f'--imputation-run-name {str_imputation_run_name} '

rule run_regional_my_str_gwas:
    input:
        "traits/phenotypes/{phenotype}.npy",
        'association/results/{phenotype}/my_str/time.stamp',
        "traits/adjusted_srin_phenotypes/{phenotype}_linear.npy",
        f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chr}}.vcf.gz",
        f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chr}}.vcf.gz.tbi"
    output:
        "association/results/{phenotype}/my_str/batches/chr{chr}_{start}_{end}.tab"
    shell:
        'association/my_regional_gwas.py strs {wildcards.phenotype} '
        '--region {wildcards.chr}:{wildcards.start}-{wildcards.end} '
        f'--imputation-run-name {str_imputation_run_name} '

rule concatenate_my_str_gwas:
    input:
        lambda wildcards:
            [f'association/results/{wildcards.phenotype}/my_str/batches/chr{region}.tab' for
             region in regions(int(1e7))]
    output:
        protected('association/results/{phenotype}/my_str/results.tab')
    run:
        concatenate_csvs(output[0], input)

rule prep_plink_input:
    input:
        'traits/shared_covars/shared_covars.npy',
        'traits/shared_covars/covar_names.txt',
        'traits/subset_rin_phenotypes/{phenotype}.npy',
        'traits/phenotypes/{phenotype}_covar_names.txt'
    output:
        'association/results/{phenotype}/plink_snp/input/rin_phenotype_and_covars.tab'
    shell:
        'association/prep_plink_input.py {wildcards.phenotype}'

rule timestamp_plink_run:
    output:
        'association/results/{phenotype}/plink_snp/time.stamp'
    shell:
        'touch association/results/{wildcards.phenotype}/plink_snp/time.stamp'

rule run_plink_gwas:
    input:
        'traits/shared_covars/covar_names.txt',
        'traits/phenotypes/{phenotype}_covar_names.txt',
        'association/results/{phenotype}/plink_snp/input/rin_phenotype_and_covars.tab',
        'association/results/{phenotype}/plink_snp/time.stamp'
    output:
        'association/results/{phenotype}/plink_snp/chrs/chr{chrom}/plink2.rin_{phenotype}.glm.linear.done'
    shell:
        'PHENOTYPE={wildcards.phenotype} CHROM={wildcards.chrom} association/plink_association.sh'

rule concatenate_plink_gwas:
    input:
        lambda wildcards:
            ['association/results/{wildcards.phenotype}/plink_snp/chrs/chr{chrom}/plink2.rin_{wildcards.phenotype}.glm.linear.done' for
             chrom in range(1, 23)]
    output:
        protected('association/results/{phenotype}/plink_snp/results.tab')
    run:
        concatenate_csvs(output[0], input)

rule subset_my_gwas_results:
    input:
        'association/results/{phenotype}/my_{gwas_type}/results.tab'
    output:
        'association/plots/input/{phenotype}/my_{gwas_type}_results.tab'
    shell:
        "head -n 1 "
        "association/results/{wildcards.phenotype}/my_{wildcards.gwas_type}/results.tab "
        "> association/plots/input/{wildcards.phenotype}/my_{wildcards.gwas_type}_results.tab.temp && "
        "awk '{{ if ($5 < 0.00005) {{ print }} }}' "
        "association/results/{wildcards.phenotype}/my_{wildcards.gwas_type}/results.tab "
        ">> association/plots/input/{wildcards.phenotype}/my_{wildcards.gwas_type}_results.tab.temp && "
        "mv association/plots/input/{wildcards.phenotype}/my_{wildcards.gwas_type}_results.tab.temp "
        "association/plots/input/{wildcards.phenotype}/my_{wildcards.gwas_type}_results.tab "

rule subset_plink_gwas_results:
    input:
        'association/results/{phenotype}/plink_snp/results.tab'
    output:
        'association/plots/input/{phenotype}/plink_snp_results.tab'
    shell:
        "head -n 1 "
        "association/results/{wildcards.phenotype}/plink_snp/results.tab "
        "> association/plots/input/{wildcards.phenotype}/plink_snp_results.tab.temp && "
        "awk '{{ if ($14 < 0.00005) {{ print }} }}' "
        "association/results/{wildcards.phenotype}/plink_snp/results.tab "
        ">> association/plots/input/{wildcards.phenotype}/plink_snp_results.tab.temp && "
        "mv association/plots/input/{wildcards.phenotype}/plink_snp_results.tab.temp "
        "association/plots/input/{wildcards.phenotype}/plink_snp_results.tab "


rule interactive_manhattan:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        'association/plots/input/{phenotype}/my_str_results.tab',
        'association/plots/input/{phenotype}/plink_snp_results.tab'
    output:
        'association/plots/{phenotype}_interactive_manhattan.html'
    shell:
        'association/interactive_manhattan_plots.py {wildcards.phenotype}'

phenotypes = ['height', 'total_bilirubin']
