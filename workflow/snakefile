import collections
import csv
import glob
import json
import pathlib

import numpy as np
import pandas as pd
import polars
import shutil

import python_array_utils as utils
import phenotypes

chr_lens = np.genfromtxt(
    'misc_data/genome/chr_lens.txt',
    usecols=[1],
    skip_header=1,
    dtype=int
)

str_imputation_run_name = 'first_pass'

def chr_expand(string):
    return [string.replace('CHR', str(chrom)) for chrom in range(1, 23)]

def pheno_expand(string):
    return [string.replace('PHENO', phenotype) for phenotype in phenotypes.phenotypes_in_use]

################## Loading and collating data ############################

rule decompress_field:
    input:
        'main_dataset/raw_data/ukb46781.enc_ukb',
        'main_dataset/raw_data/ukb46782.enc_ukb'
    output:
        data=protected("main_dataset/extracted_data/{field_name}_{field_id,[0-9]+}.txt"),
        readme=protected("main_dataset/extracted_data/{field_name}_{field_id}_README.txt")
    resources:
        time='05:00:00'
    shell:
        "main_dataset/decompress_trait.py {wildcards.field_name} {wildcards.field_id} "

rule ethnic_sample_lists:
    input:
        white_brits='sample_qc/common_filters/keep/white_brits.sample',
        ethnicities=expand(rules.decompress_field.output.data, field_name='ethnicity_self_report', field_id='21000')
    output:
        # must all go into the same directory
        all_files=expand(
            'sample_qc/common_filters/ethnicity/{ethnicity}.sample',
            ethnicity={'black', 'white_other', 'irish', 'southeast_asian', 'chinese'}
        )
    resources:
        time='00:05:00'
    params:
        outdir=lambda wildcards, output: '/'.join(output.all_files[0].split('/')[:-1])
    shell:
        'sample_qc/scripts/ethnicity.py {params.outdir} {input.white_brits} {input.ethnicities} '

rule possible_samples:
    input:
        glob.glob("sample_qc/common_filters/keep/*sample"),
        glob.glob("sample_qc/common_filters/remove/*sample")
    output:
        'sample_qc/runs/no_phenotype/combined.sample',
        'sample_qc/runs/no_phenotype/README.txt'
    resources:
        time='00:05:00',
    shell:
        'sample_qc/scripts/combine.py '

rule load_shared_covars:
    input:
        "main_dataset/extracted_data/assessment_ages_21003.txt"
    output:
        shared_covars=protected("traits/shared_covars/shared_covars.npy"),
        assessment_ages=protected("traits/shared_covars/assessment_ages.npy"),
        readme=protected("traits/shared_covars/README.txt"),
        covar_names=protected("traits/shared_covars/covar_names.txt")
    resources:
        time='00:15:00',
        mem_gb=10
    shell:
        "traits/load_shared_covars.py"

def input_fields_for_phenotype(wildcards):
    phenotype = wildcards.phenotype
    if phenotype in phenotypes.pheno_descs:
        args = phenotypes.pheno_descs[phenotype]
    else:
        raise ValueError(f"Couldn't identify phenotype {phenotype}")
    fields = [
        f"main_dataset/extracted_data/{wildcards.phenotype}_{args.data_field_id}.txt",
        *[f"main_dataset/extracted_data/{covar_field_name}_{covar_field_id}.txt" for
          covar_field_name, covar_field_id in args.categorical_covars]
    ]
    if phenotypes.is_binary(phenotype):
        fields.extend([
            "main_dataset/extracted_data/year_of_birth_34.txt",
            "main_dataset/extracted_data/month_of_birth_52.txt",
            "main_dataset/extracted_data/date_of_death_40000.txt",
        ])
    return fields

rule load_phenotype:
    input:
        "traits/shared_covars/assessment_ages.npy",
        'sample_qc/runs/no_phenotype/combined.sample',
        input_fields_for_phenotype
    output:
        phenotype=protected("traits/phenotypes/{phenotype}.npy"),
        readme=protected("traits/phenotypes/{phenotype}_README.txt"),
        unit=protected("traits/phenotypes/{phenotype}_unit.txt"),
        covar_names=protected("traits/phenotypes/{phenotype}_covar_names.txt")
    resources:
        time='00:05:00'
    run:
        phenotype = wildcards.phenotype
        if phenotype in phenotypes.pheno_descs:
            args = phenotypes.pheno_descs[phenotype]
            if 'binary' in args.unit:
                if args.unit != 'binary_date_first_reported':
                    raise ValueError("Only type of binary field understood is binary_date_first_reported")
                shell(
                    'traits/load_binary_phenotype_from_main_dataset.py '
                    f'{phenotype} {args.data_field_id}'
                )
            else:
                base_command = (
                    "traits/load_continuous_phenotype_from_main_dataset.py "
                    f"{phenotype} {args.data_field_id} '{args.unit}' "
                )
                if not args.categorical_covars:
                    shell(base_command)
                else:
                    shell(
                        base_command + " --categorical-covars "
                        + " ".join(f'{name},{ID}' for name, ID in args.categorical_covars) + " "
                    )
        else:
            raise ValueError(f"Couldn't identify phenotype {phenotype}")

rule plot_phenotype_by_sex:
    input:
        "traits/shared_covars/shared_covars.npy",
        "traits/phenotypes/{phenotype}.npy",
        "traits/phenotypes/{phenotype}_unit.txt"
    output:
        "traits/phenotypes/{phenotype}_distribution_by_sex.png"
    resources:
        time='24:00:00',
        threads=5,
        mem_gb=10
    shell:
        'traits/plot_phenotype.py {wildcards.phenotype} sex'

rule plot_phenotype_by_age:
    input:
        "traits/phenotypes/{phenotype}.npy",
        "traits/phenotypes/{phenotype}_unit.txt"
    output:
        "traits/phenotypes/{phenotype}_distribution_by_age.png"
    resources:
        time='24:00:00',
        threads=15,
        mem_gb=30
    shell:
        'traits/plot_phenotype.py {wildcards.phenotype} age'

rule subset_samples_for_phenotype:
    input:
        "traits/phenotypes/{phenotype}.npy",
        glob.glob("sample_qc/common_filters/keep/*sample"),
        glob.glob("sample_qc/common_filters/remove/*sample"),
        "misc_data/ukbgene/ukb46122_rel_s488282.dat"
    output:
        protected("sample_qc/runs/{phenotype}/README.txt"),
        protected("sample_qc/runs/{phenotype}/combined_unrelated.sample")
    shadow: 'minimal'
    resources:
        time='24:00:00'
    run:
        cmd = (
            'shadow_dir=$(pwd) ; cd $UKB ; export UKB=${{shadow_dir}} ; '
            'sample_qc/scripts/combine.py --phenotype {wildcards.phenotype} && '
            'PHEN={wildcards.phenotype} sample_qc/scripts/test_combine.sh && '
            'sample_qc/scripts/unrelated_individuals.py {wildcards.phenotype} '
        )
        if phenotypes.is_binary(wildcards.phenotype):
            cmd += '--binary --phenotype {wildcards.phenotype} '
        cmd += '&& sample_qc/scripts/verify_unrelatedness.py {wildcards.phenotype}'
        shell(cmd)

rule transform_phenotype_subset:
    input:
        "traits/phenotypes/{phenotype}.npy",
        "sample_qc/runs/{phenotype}/combined_unrelated.sample"
    output:
        readme=protected("traits/subset_transformed_phenotypes/{phenotype}_README.txt"),
        phenotype=protected("traits/subset_transformed_phenotypes/{phenotype}.npy")
    resources:
        time='00:05:00'
    run:
        cmd = 'traits/transform_traits.py {wildcards.phenotype} '
        if phenotypes.is_binary(wildcards.phenotype):
            cmd += '--binary '
        shell(cmd)

rule plot_str_locus:
    input:
        f'str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chrom}}.vcf.gz',
        'association/results/{phenotype}/my_str/results.tab',
        'traits/subset_transformed_phenotypes/{phenotype}.npy'
    output:
        svg='association/locus_plots/{phenotype}_{chrom}_{pos}_{dosage_fraction_threshold}.svg',
        png='association/locus_plots/{phenotype}_{chrom}_{pos}_{dosage_fraction_threshold}.png'
    resources:
        time='00:30:00'
    run:
        unit = phenotypes.pheno_descs[wildcards.phenotype].unit
        shell(
            f'association/plot_locus.py {str_imputation_run_name} '
            '{wildcards.chrom} {wildcards.pos} {wildcards.phenotype} '
            '{wildcards.dosage_fraction_threshold} '
            f"--unit '{unit}' "
        )

##################### Running and Plotting Associations ###########################

sample_fname = 'microarray/ukb46122_hap_chr1_v2_s487314.sample'

def concatenate_csvs(output_file, input_files):
    with open(output_file + '.temp', 'w') as outfile:
        first = True
        for f in input_files:
            with open(f) as infile:
                first_line = True
                for line in infile:
                    if first_line and first:
                        first = False
                        first_line = False
                        outfile.write(line)
                        continue
                    elif first_line and not first:
                        first_line = False
                        continue
                    outfile.write(line)
    shutil.move(output_file + '.temp', output_file)

def regions(region_len):
    regions = []
    for chrom in range(1, 23):
        chr_len = chr_lens[chrom-1]
        for start in range(1, chr_len, region_len):
            if start + region_len - 1 > chr_len:
                end = chr_len
            else:
                end = start + region_len - 1
            regions.append(f'{chrom}_{start}_{end}')
    return regions

# no readme for conditional gwas, use readme of prep conditional input
rule write_my_gwas_readme:
    output:
        readme=protected('association/results/{phenotype}/my_{run_type,str|imputed_snp}{binary,|_linear|_logistic}/README.txt'),
        timestamp=protected('association/results/{phenotype}/my_{run_type}{binary}/time.stamp')
    resources:
        time='00:05:00'
    run:
        run_type = wildcards.run_type
        if run_type == 'str':
            command_run_type = 'strs'
            imputation_flag = f'--imputation-run-name {str_imputation_run_name}'
        else:
            assert run_type == 'imputed_snp'
            command_run_type = 'imputed-snps'
            imputation_flag = ''

        binary = wildcards.binary
        if binary == '':
            assert not phenotypes.is_binary(wildcards.phenotype)
            binary_flag = ''
        elif binary == '_linear':
            assert phenotypes.is_binary(wildcards.phenotype)
            binary_flag = '--binary linear'
        else:
            assert binary == '_logistic'
            assert phenotypes.is_binary(wildcards.phenotype)
            binary_flag = '--binary logistic'

        shell(
            'touch association/results/{wildcards.phenotype}/my_{wildcards.run_type}/time.stamp && '
            'association/my_regional_gwas.py '
            '{output.readme} '
            f'{command_run_type} '
            '{wildcards.phenotype} '
            '--readme '
            f'{imputation_flag} '
            f'{binary_flag} '
        )

def my_regional_gwas_mem_gb_req(wildcards, attempt):
    if wildcards.suffix != '_logistic':
        return 9
    else:
        return 40

# TODO update for new syntax
rule run_regional_my_imputed_snp_gwas:
    input:
        "traits/phenotypes/{phenotype}.npy",
        'association/results/{phenotype}/my_imputed_snp{suffix}/time.stamp',
        "traits/subset_transformed_phenotypes/{phenotype}.npy"
    output:
        "association/results/{phenotype}/my_imputed_snp{suffix,.*}/batches/chr{chrom}_{start}_{end}.tab"
    resources:
        time='24:00:00',
        mem_gb=my_regional_gwas_mem_gb_req
    run:
        cmd = (
            'association/my_regional_gwas.py imputed-snps {wildcards.phenotype} '
            '--region {wildcards.chrom}:{wildcards.start}-{wildcards.end} '
        )
        if wildcards.suffix == '':
            assert not phenotypes.is_binary(wildcards.phenotype)
        elif wildcards.suffix == '_linear':
            assert phenotypes.is_binary(wildcards.phenotype)
            cmd += '--binary linear '
        else:
            assert wildcards.suffix == '_logistic'
            assert phenotypes.is_binary(wildcards.phenotype)
            cmd += '--binary logistic '

        shell(cmd)

rule concatenate_and_move_my_imputed_snp_continuous_gwas_chr21:
    input:
        lambda wildcards:
            [f'association/results/{wildcards.phenotype}/my_imputed_snp/batches/chr{region}.tab' for
             region in regions(int(1e5)) if region[:3] == '21_']
    output:
        protected('association/plots/input/{phenotype}/my_imputed_snp_chr21_results.tab')
    resources:
        time='04:00:00'
    run:
        concatenate_csvs(output[0], input)

rule copy_my_imputed_snp_binary_linear_gwas_chr21_10000001_11000000:
    input:
        'association/results/{phenotype}/my_imputed_snp_linear/batches/chr21_10000001_11000000.tab'
    output:
        protected('association/plots/input/{phenotype}/my_imputed_snp_linear_chr21_10000001_11000000_results.tab')
    resources:
        time='00:05:00'
    shell:
        'cp {input[0]} {output[0]}'

rule move_my_imputed_snp_binary_logistic_gwas_chr21_10000001_11000000:
    input:
        'association/results/{phenotype}/my_imputed_snp_logistic/batches/chr21_10000001_11000000.tab'
    output:
        protected('association/plots/input/{phenotype}/my_imputed_snp_logistic_chr21_10000001_11000000_results.tab')
    resources:
        time='00:05:00'
    run:
        shutil.move(input[0], output[0])

rule run_str_spot_test:
    input:
        shared_covars=rules.load_shared_covars.output.shared_covars,
        untransformed_phenotype=rules.load_phenotype.output.phenotype,
        transformed_phenotype=rules.transform_phenotype_subset.output.phenotype,
        sample_fname = sample_fname,
        vcf=f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chrom}}.vcf.gz",
        vcf_idx=f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chrom}}.vcf.gz.tbi"
    output:
        result=protected('association/spot_test/{phenotype}/chr{chrom}_{pos}.tab'),
        readme=protected('association/spot_test/{phenotype}/chr{chrom}_{pos}_README.txt'),
    resources:
        time='00:20:00',
        mem_gb=lambda wildcards: 9 if not phenotypes.is_binary(wildcards.phenotype) else 40
    run:
        if not phenotypes.is_binary(wildcards.phenotype):
            binary_flag = ''
        else:
            binary_flag = '--binary logistic'

        shell(
            'association/my_regional_gwas.py '
            '{output.readme} '
            'strs '
            '{wildcards.phenotype} '
            '--readme '
            f'--imputation-run-name {str_imputation_run_name} '
            f'{binary_flag} '
        )

        shell(
            'association/my_regional_gwas.py '
            '{output.result} '
            'strs '
            '{wildcards.phenotype} '
            '--region {wildcards.chrom}:{wildcards.pos}-{wildcards.pos} '
            '--pheno-and-covars {input.transformed_phenotype} '
            '--shared-covars {input.shared_covars} '
            '--untransformed-phenotypes {input.untransformed_phenotype} '
            '--sample-file {input.sample_fname} '
            f'--imputation-run-name {str_imputation_run_name} '
            f'{binary_flag} '
        )

# TODO update for new syntax
rule run_regional_my_str_gwas:
    input:
        shared_covars=rules.load_shared_covars.output.shared_covars,
        untransformed_phenotype=rules.load_phenotype.output.phenotype,
        run_timestamp=rules.write_my_gwas_readme.output.timestamp,
        #run_timestamp='association/results/{phenotype}/my_str{suffix}/time.stamp',
        transformed_phenotype=rules.transform_phenotype_subset.output.phenotype,
        vcf=f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chrom}}.vcf.gz",
        vcf_idx=f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chrom}}.vcf.gz.tbi"
    output:
        results=temporary("association/results/{phenotype}/my_str{suffix,.*}/batches/chr{chrom}_{start}_{end}.tab")
    resources:
        time='12:00:00',
        mem_gb=my_regional_gwas_mem_gb_req
    run:
        cmd = (
            'association/my_regional_gwas.py strs {wildcards.phenotype} '
            '--region {wildcards.chrom}:{wildcards.start}-{wildcards.end} '
            f'--imputation-run-name {str_imputation_run_name} '
        )

        if wildcards.suffix == '':
            assert not phenotypes.is_binary(wildcards.phenotype)
        elif wildcards.suffix == '_linear':
            assert phenotypes.is_binary(wildcards.phenotype)
            cmd += '--binary linear '
        else:
            assert wildcards.suffix == '_logistic'
            assert phenotypes.is_binary(wildcards.phenotype)
            cmd += '--binary logistic '

        shell(cmd)

rule concatenate_my_str_gwas:
    input:
        lambda wildcards:
            [f'association/results/{wildcards.phenotype}/my_str{wildcards.suffix}/batches/chr{region}.tab' for
             region in regions(int(1e7))]
    output:
        results = protected('association/results/{phenotype}/my_str{suffix,|_linear}/results.tab')
    resources:
        time='04:00:00'
    run:
        concatenate_csvs(output[0], input)

rule prep_continuous_plink_input:
    input:
        'traits/shared_covars/shared_covars.npy',
        'traits/shared_covars/covar_names.txt',
        'traits/subset_transformed_phenotypes/{phenotype}.npy',
        'traits/phenotypes/{phenotype}_covar_names.txt'
    output:
        'association/results/{phenotype}/plink_snp{suffix,|_linear}/input/transformed_phenotype_and_covars.tab'
    resources:
        time='00:30:00'
    run:
        cmd = 'association/prep_plink_input.py {wildcards.phenotype} '
        if phenotypes.is_binary(wildcards.phenotype):
            assert wildcards.suffix == '_linear'
            cmd += '--binary linear '
        else:
            assert wildcards.suffix == ''

        shell(cmd)

rule prep_binary_plink_input:
    input:
        'traits/shared_covars/shared_covars.npy',
        'traits/shared_covars/covar_names.txt',
        'traits/subset_transformed_phenotypes/{phenotype}.npy',
        'traits/phenotypes/{phenotype}_covar_names.txt'
    output:
        'association/results/{phenotype}/plink_snp_logistic/input/transformed_phenotype_and_covars.tab'
    resources:
        time='00:30:00'
    shell:
        'association/prep_plink_input.py {wildcards.phenotype} --binary logistic '

rule timestamp_plink_run:
    output:
        'association/results/{phenotype}/plink_snp{suffix,.*}/time.stamp'
    resources:
        time='00:05:00'
    shell:
        'touch association/results/{wildcards.phenotype}/plink_snp{wildcards.suffix}/time.stamp'

rule run_linear_plink_gwas_parent:
    input:
        'association/results/{phenotype}/plink_snp{suffix}/input/transformed_phenotype_and_covars.tab',
        'association/results/{phenotype}/plink_snp{suffix}/time.stamp'
    resources:
        time='06:00:00',
        threads=28,
        mem_gb=56
    run:
        if wildcards.suffix == '':
            assert wildcards.rin == 'rin_'
            assert not phenotypes.is_binary(wildcards.phenotype)
        else:
            assert wildcards.rin == ''
            assert wildcards.suffix == '_linear'
            assert phenotypes.is_binary(wildcards.phenotype)

        shell('PHENOTYPE={wildcards.phenotype} CHROM={wildcards.chrom} SUFFIX={wildcards.suffix} association/plink_association.sh')

use rule run_linear_plink_gwas_parent as run_linear_binary_plink_gwas with:
    output:
        results=temporary('association/results/{phenotype}/plink_snp{suffix,_linear}/chrs/chr{chrom}/plink2.{phenotype}.glm.linear.done'),
        plinklog='association/results/{phenotype}/plink_snp{suffix,_linear}/chrs/chr{chrom}/plink2.log'

use rule run_linear_plink_gwas_parent as run_linear_rin_plink_gwas with:
    output:
        results=temporary('association/results/{phenotype}/plink_snp{suffix,}/chrs/chr{chrom}/plink2.rin_{phenotype}.glm.linear.done'),
        plinklog='association/results/{phenotype}/plink_snp{suffix,}/chrs/chr{chrom}/plink2.log'

rule run_logistic_plink_gwas:
    input:
        'association/results/{phenotype}/plink_snp_logistic/input/transformed_phenotype_and_covars.tab',
        'association/results/{phenotype}/plink_snp_logistic/time.stamp'
    output:
        temporary('association/results/{phenotype}/plink_snp_logistic/batches/chr{chrom}_{start}_{end}/plink2.{phenotype}.glm.logistic.hybrid.done')
    resources:
        time='12:00:00',
        threads=28,
        mem_gb=56
    shell:
        'PHENOTYPE={wildcards.phenotype} CHROM={wildcards.chrom} START={wildcards.start} '
        'END={wildcards.end} SUFFIX=_logistic association/plink_association.sh'

def concatenate_whole_genome_plink_gwas_input(wildcards):
    if not wildcards.suffix:
        rin = 'rin_'
    else:
        assert phenotypes.is_binary(wildcards.phenotype)
        assert wildcards.suffix == '_linear'
        rin = ''

    return [
        f'association/results/{wildcards.phenotype}/plink_snp{wildcards.suffix}/chrs/chr{chrom}/plink2.{rin}{wildcards.phenotype}.glm.linear.done' for
        chrom in range(1, 23)
    ]

rule concatenate_linear_plink_gwas:
    input:
        concatenate_whole_genome_plink_gwas_input
    output:
        results=protected('association/results/{phenotype,[^/]+}/plink_snp{suffix,|_linear}/results.tab')
    resources:
        time='04:00:00'
    run:
        if wildcards.suffix == '':
            assert not phenotypes.is_binary(wildcards.phenotype)
        else:
            assert wildcards.suffix == '_linear'
            assert phenotypes.is_binary(wildcards.phenotype)

        concatenate_csvs(output.results, input)

rule append_mfi_to_comparison_logistic_plink_run:
    input:
        'association/results/{phenotype}/plink_snp_logistic/batches/chr{chrom}_{start}_{end}/plink2.{phenotype}.glm.logistic.hybrid.done'
    output:
        'association/plots/input/{phenotype}/plink_snp_logistic_chr{chrom}_{start}_{end}_results_with_mfi.npy'
    resources:
        time='00:30:00',
        mem_gb = 10
    shell:
        'association/append_mfi_to_plink_snp.py {input[0]} {output[0]} --binary logistic '

INTERACTIVE_MANHATTAN_GWAS_THRESHOLD = 0.00005

def subset_gwas_results(
        input_file,
        output_file,
        p_val_col,
        threshold = INTERACTIVE_MANHATTAN_GWAS_THRESHOLD):
    shell(
        f"head -n 1 {input_file} > {output_file}.temp && "
        f'tail -n +2 {input_file} | '
        "awk '{{ if ($" + str(p_val_col) + " < " + str(threshold) + ") {{ print }} }}' "
        ">> {output_file}.temp && "
        f"mv {output_file}.temp {output_file} "
    )

rule subset_my_gwas_results:
    input:
        'association/results/{phenotype}/my_{gwas_type}/results.tab'
    output:
        subsetted_results='association/plots/input/{phenotype}/my_{gwas_type}_results.tab'
    resources:
        time='01:00:00'
    run:
        subset_gwas_results(
             f"association/results/{wildcards.phenotype}/my_{wildcards.gwas_type}/results.tab",
             f"association/plots/input/{wildcards.phenotype}/my_{wildcards.gwas_type}_results.tab",
             5
         )

rule subset_plink_gwas_results:
    input:
        'association/results/{phenotype}/plink_snp{suffix}/results.tab'
    output:
        subsetted_tab='association/plots/input/{phenotype}/plink_snp{suffix,|_linear|logistic}_results.tab'
    resources:
        time='08:00:00'
    run:
        if wildcards.suffix == '':
            assert not phenotypes.is_binary(wildcards.phenotype)
            p_val_col = 14
        else:
            assert phenotypes.is_binary(wildcards.phenotype)
            if wildcards.suffix == '_linear':
                p_val_col = 11
            else:
                assert wildcards.suffix == '_logistic'
                p_val_col = 14

        subset_gwas_results(
             f'{input[0]}',
             f'{output[0]}',
             p_val_col
        )

rule append_mfi_to_subsetted_plink_results:
    input:
        rules.subset_plink_gwas_results.output.subsetted_tab
    output:
        mfi_npy='association/plots/input/{phenotype}/plink_snp{suffix,[^.]*}_results_with_mfi.npy'
    resources:
        time='01:00:00',
        mem_gb = 50
    run:
        cmd = 'association/append_mfi_to_plink_snp.py {input[0]} {output[0]} '
        if wildcards.suffix == '':
            assert not phenotypes.is_binary(wildcards.phenotype)
        elif wildcards.suffix == '_linear':
            assert phenotypes.is_binary(wildcards.phenotype)
            cmd += '--binary linear '
        else:
            assert phenotypes.is_binary(wildcards.phenotype)
            assert wildcards.suffix == '_logistic'
            cmd += '--binary logistic '
        shell(cmd)

rule compare_my_to_plink_continuous_gwas:
    input:
        "traits/phenotypes/eosinophil_count_unit.txt",
        'association/plots/input/eosinophil_count/my_imputed_snp_chr21_results.tab',
        # it's okay to ask for plink snp for the entire genome because we'll want that anyway
        'association/plots/input/eosinophil_count/plink_snp_results_with_mfi.npy'
    output:
        'association/plots/continuous_my_imputed_snp_vs_plink.html'
    resources:
        time='00:30:00',
        mem_gb=50
    shell:
        'association/interactive_manhattan_plot.py eosinophil_count html --my-plink-comparison --chrom 21 '

rule compare_my_to_plink_continuous_gwas_figure_plink_only:
    input:
        "traits/phenotypes/eosinophil_count_unit.txt",
        # it's okay to ask for plink snp for the entire genome because we'll want that anyway
        'association/plots/input/eosinophil_count/plink_snp_results_with_mfi.npy'
    output:
        'association/plots/continuous_plink_snp.png'
    resources:
        time='00:30:00',
        mem_gb=50
    shell:
        'association/interactive_manhattan_plot.py eosinophil_count png '
        '--my-plink-comparison --chrom 21 --only-plink '

rule compare_my_to_plink_continuous_gwas_figure_mine_only:
    input:
        "traits/phenotypes/eosinophil_count_unit.txt",
        'association/plots/input/eosinophil_count/my_imputed_snp_chr21_results.tab',
    output:
        'association/plots/continuous_my_imputed_snp.png'
    resources:
        time='00:30:00',
        mem_gb=50
    shell:
        'association/interactive_manhattan_plot.py eosinophil_count png '
        '--my-plink-comparison --chrom 21 --only-mine'

rule compare_my_to_plink_binary_linear_gwas:
    input:
        "traits/phenotypes/afib_and_flutter_I48_unit.txt",
        'association/plots/input/afib_and_flutter_I48/my_imputed_snp_linear_chr21_10000001_11000000_results.tab',
        # it's okay to ask for plink snp for the entire genome because we'll want that anyway
        'association/plots/input/afib_and_flutter_I48/plink_snp_linear_results_with_mfi.npy'
    output:
        'association/plots/binary_linear_my_imputed_snp_vs_plink.html'
    resources:
        time='00:30:00',
        mem_gb=50
    shell:
        'association/interactive_manhattan_plot.py afib_and_flutter_I48 html --my-plink-comparison --binary linear '
        '--chrom 21 --start 10000001 --end 11000000 '

rule compare_my_to_plink_binary_logistic_gwas:
    input:
        "traits/phenotypes/afib_and_flutter_I48_unit.txt",
        'association/plots/input/afib_and_flutter_I48/my_imputed_snp_logistic_chr21_10000001_11000000_results.tab',
        plink_snp_fname='association/plots/input/afib_and_flutter_I48/plink_snp_logistic_chr21_10000001_11000000_results_with_mfi.npy'
    output:
        'association/plots/binary_logistic_my_imputed_snp_vs_plink.html'
    resources:
        time='00:30:00',
        mem_gb=50
    shell:
        'association/interactive_manhattan_plot.py afib_and_flutter_I48 html --my-plink-comparison --binary logistic '
        '--plink-snp-fname {input.plink_snp_fname} '
        '--chrom 21 --start 10000001 --end 11000000 '

def manhattan_inputs(wildcards):
    prefix = f'association/plots/input/{wildcards.phenotype}'
    if wildcards.binary_type:
        runtype = wildcards.binary_type.replace(".", "_")
    else:
        runtype = ""
    return [
        f'{prefix}/my_str{runtype}_results.tab',
        f'{prefix}/plink_snp{runtype}_results_with_mfi.npy'
    ]

rule manhattan:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        manhattan_inputs
    output:
        'association/plots/{phenotype,[^.]*}{binary_type,|.linear|.logistic}.manhattan.{ext,[^.]+}'
    resources:
        time='00:30:00',
        mem_gb=50
    run:
        cmd = 'association/interactive_manhattan_plot.py {wildcards.phenotype} {wildcards.ext} '
        if not phenotypes.is_binary(wildcards.phenotype):
            assert wildcards.binary_type == ''
        else:
            assert wildcards.binary_type != ''
            cmd += f'--binary {wildcards.binary_type[1:]} '
        shell(cmd)

rule region_manhattan:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        'association/plots/input/{phenotype}/my_str_results.tab',
        'association/plots/input/{phenotype}/plink_snp_results_with_mfi.npy'
    output:
        'association/plots/{phenotype}{binary_type,|.linear|.logistic}.manhattan.chr{chrom}_{start,[^_]+}_{end,[^_]+}.{ext}'
    resources:
        time='00:30:00',
        mem_gb=50
    run:
        cmd = (
            'association/interactive_manhattan_plot.py {wildcards.phenotype} {wildcards.ext} '
            '--chrom {wildcards.chrom} '
            '--start {wildcards.start} '
            '--end {wildcards.end} '
        )
        if not phenotypes.is_binary(wildcards.phenotype):
            assert wildcards.binary_type == ''
        else:
            assert wildcards.binary_type != ''
            cmd += f'--binary {wildcards.binary_type[1:]} '
        shell(cmd)

################### Running and Plotting Conditional Associations ######################
#TODO implement/test binary for all conditional commands (including ones that had an attempt at supporting binary)

rule prep_conditional_input:
    output:
        npy='association/results/{phenotype}/conditional_inputs/chr{chrom}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP.npy',
        varnames='association/results/{phenotype}/conditional_inputs/chr{chrom}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP_varnames.txt',
        readme='association/results/{phenotype}/conditional_inputs/chr{chrom}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP_README.txt'
    resources:
        time='00:30:00'
    run:
        command = 'association/prep_conditional_inputs.py {wildcards.phenotype} {wildcards.chrom} '
        if wildcards.STRs:
            command += f'--imputation-run-name {str_imputation_run_name} --STRs ' 
            command += wildcards.STRs.replace('_', ' ') + ' '
        if wildcards.imputed_SNPs:
            command += '--imputed-SNPs '
            command += wildcards.imputed_SNPs.replace('_', ' ') + ' '
        shell(command)

rule run_conditional_my_str_gwas:
    input:
        shared_covars=rules.load_shared_covars.output.shared_covars,
        untransformed_phenotype=rules.load_phenotype.output.phenotype,
        transformed_phenotype=rules.transform_phenotype_subset.output.phenotype,
        conditional_covars=rules.prep_conditional_input.output.npy,
        sample_fname = sample_fname,
        vcf=f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chrom}}.vcf.gz",
        vcf_idx=f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chrom}}.vcf.gz.tbi"
    output:
        result='association/results/{phenotype}/my_str_conditional/chr{chrom}_{start}_{end}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP.tab'
    params:
        binary_flag = lambda wildcards: '' if not phenotypes.is_binary(wildcards.phenotype) else '--binary logistic'
    resources:
        time='12:00:00',
        mem_gb=9,
        threads=4
    shell:
        'association/my_regional_gwas.py '
        '{output.result} '
        'strs '
        '{wildcards.phenotype} '
        '--region {wildcards.chrom}:{wildcards.start}-{wildcards.end} '
        '--pheno-and-covars {input.transformed_phenotype} '
        '--shared-covars {input.shared_covars} '
        '--untransformed-phenotypes {input.untransformed_phenotype} '
        '--conditional-covars {input.conditional_covars} '
        '--sample-file {input.sample_fname} '
        f'--imputation-run-name {str_imputation_run_name} '
        '{params.binary_flag} '

rule prep_conditional_plink_input:
    input:
        'association/results/{phenotype}/conditional_inputs/chr{chrom}_STR{STRs}__ISNP{imputed_SNPs}__ASNP.npy',
        'association/results/{phenotype}/conditional_inputs/chr{chrom}_STR{STRs}__ISNP{imputed_SNPs}__ASNP_varnames.txt',
        'traits/shared_covars/shared_covars.npy',
        'traits/shared_covars/covar_names.txt',
        'traits/subset_transformed_phenotypes/{phenotype}.npy',
        'traits/phenotypes/{phenotype}_covar_names.txt'
    output:
        'association/results/{phenotype}/conditional_inputs/chr{chrom}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP_plink.tab'
    resources:
        time='00:30:00'
    run:
        cmd = (
            'association/prep_plink_input.py {wildcards.phenotype} '
            '--conditional chr{wildcards.chrom}_STR{wildcards.STRs}__ISNP{wildcards.imputed_SNPs}__ASNP '
        )
        if phenotypes.is_binary(wildcards.phenotype):
            cmd += '--binary '
        shell(cmd)

rule run_continuous_conditional_plink_gwas:
    input:
        'association/results/{phenotype}/conditional_inputs/chr{chrom}_STR{STRs}__ISNP{ISNPs}__ASNP_plink.tab'
    output:
        results='association/results/{phenotype}/plink_snp_conditional/chr{chrom}_{start}_{end}_STR{STRs,.*}__ISNP{ISNPs,.*}__ASNP/plink2.rin_{phenotype}.glm.linear.done'
    resources:
        time='24:00:00',
        mem_gb=110,
        threads=28
    shell:
        'PHENOTYPE={wildcards.phenotype} CHROM={wildcards.chrom} '
        'CONDITIONAL=STR{wildcards.STRs}__ISNP{wildcards.ISNPs}__ASNP '
        'START={wildcards.start} END={wildcards.end} '
        'association/plink_association.sh'

rule run_binary_conditional_plink_gwas:
    input:
        'association/results/{phenotype}/conditional_inputs/chr{chrom}_STR{STRs}__ISNP{ISNPs}__ASNP_plink.tab'
    output:
        'association/results/{phenotype}/plink_snp_conditional/chr{chrom}_{start}_{end}_STR{STRs,.*}__ISNP{ISNPs,.*}__ASNP/plink2.rin_{phenotype}.glm.logistic.hybrid.done'
    resources:
        time='24:00:00',
        mem_gb=110,
        threads=28
    shell:
        'PHENOTYPE={wildcards.phenotype} CHROM={wildcards.chrom} '
        'CONDITIONAL=STR{wildcards.STRs}__ISNP{wildcards.ISNPs}__ASNP '
        'START={wildcards.start} END={wildcards.end} '
        'BINARY=set '
        'association/plink_association.sh'

rule append_mfi_to_conditional_plink_results:
    input:
        'association/results/{phenotype}/plink_snp_conditional/chr{condition}/plink2.rin_{phenotype}.glm.linear.done'
    output:
        mfi_npy='association/plots/input/{phenotype,[^/]+}/plink_snp_conditional_chr{condition,[^/.]+}_results_with_mfi.npy'
    resources:
        time='01:00:00',
        mem_gb = 50
    shell:
        'association/append_mfi_to_plink_snp.py {input[0]} {output[0]}'

rule manhattan_conditional:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        'association/plots/input/{phenotype}/my_str_results.tab',
        'association/results/{phenotype}/my_str_conditional/chr{condition}.tab',
        'association/plots/input/{phenotype}/plink_snp_results_with_mfi.npy',
        rules.append_mfi_to_conditional_plink_results.output.mfi_npy,
    output:
        manhattan='association/plots/{phenotype,[^.]+}.manhattan.chr{condition,[^.]+}.{ext,html|png|svg}'
    resources:
        time='00:30:00',
        mem_gb=50
    shell:
        'association/interactive_manhattan_plot.py {wildcards.phenotype} {wildcards.ext} '
        '--condition chr{wildcards.condition} '

###################### Extracting Association Signals #######################

def generate_regions_input(wildcards):
    phenotype = wildcards.phenotype
    if not phenotypes.is_binary(phenotype):
        return {
            'strs': f'association/results/{phenotype}/my_str/results.tab',
            'imputed_snps': f'association/results/{phenotype}/plink_snp/results.tab'
        }
    else:
        return {
            'strs': f'association/results/{phenotype}/my_str_linear/results.tab',
            'imputed_snps': f'association/results/{phenotype}/plink_snp_linear/results.tab'
        }

checkpoint generate_regions:
    input:
        unpack(generate_regions_input)
    output:
        readme=protected('signals/regions/{phenotype}_README.txt'),
        table=protected('signals/regions/{phenotype}.tab')
    resources:
        time='00:30:00',
        mem_gb = 10
    shell:
        'signals/regions.py {wildcards.phenotype} {input.strs} {input.imputed_snps} {output.table} '

def generated_regions(phenotype):
    checkpoints.generate_regions.get(phenotype=phenotype)
    df = polars.read_csv(
        expand(rules.generate_regions.output.table, phenotype=phenotype)[0],
        sep='\t'
    )
    df = df[df['any_strs']]
    return list(zip(df['chrom'], df['start'], df['end']))

def n_regions_no_strs(phenotype):
    checkpoints.generate_regions.get(phenotype=phenotype)
    df = polars.read_csv(
        expand(rules.generate_regions.output.table, phenotype=phenotype)[0],
        sep='\t'
    )
    return (~df['any_strs']).sum()

def peak_snp_input_inputs(wildcards):
    if not phenotypes.is_binary(wildcards.phenotype):
        runtype_suffix = ''
    else:
        runtype_suffix = '_logistic'
    return f'association/results/{wildcards.phenotype}/plink_snp{runtype_suffix}/results.tab'

rule peak_snp_inputs:
    input:
        peak_snp_input_inputs
    output:
        temporary('signals/peak_inputs/{phenotype}_imputed_snp_{thresh}.tab')
        #'signals/peak_inputs/{phenotype}_imputed_snp_{thresh}.tab'
    resources:
        time='01:00:00'
    run:
        subset_gwas_results(
            input[0],
            output[0],
            14 if not phenotypes.is_binary(wildcards.phenotype) else 11,
            threshold = float(wildcards.thresh)
        )

def peak_str_input_inputs(wildcards):
    if not phenotypes.is_binary(wildcards.phenotype):
        runtype_suffix = ''
    else:
        runtype_suffix = '_logistic'
    return f'association/results/{wildcards.phenotype}/my_str{runtype_suffix}/results.tab'

rule peak_str_inputs:
    input:
        peak_str_input_inputs
    output:
        temporary('signals/peak_inputs/{phenotype}_str_{thresh}.tab')
        #'signals/peak_inputs/{phenotype}_str_{thresh}.tab'
    resources:
        time='01:00:00'
    run:
        subset_gwas_results(
            input[0],
            output[0],
            5,
            threshold = float(wildcards.thresh)
        )

rule generate_peaks:
    input:
        strs='signals/peak_inputs/{phenotype}_str_{thresh}.tab',
        imputed_snps='signals/peak_inputs/{phenotype}_imputed_snp_{thresh}.tab'
    output:
        readme=protected('signals/peaks/{phenotype}_{spacing}_{thresh}_README.txt'),
        peaks=protected('signals/peaks/{phenotype}_{spacing}_{thresh}.tab')
    resources:
        time='01:00:00'
    shell:
        'signals/peaks.py {wildcards.phenotype} {wildcards.spacing} {input.strs} {input.imputed_snps} '
        '{output.readme} {output.peaks} '

rule region_peak_comparison:
    input:
        'signals/regions/{phenotype}.tab',
        'signals/peaks/{phenotype}_250000_5e-8.tab'
    output:
        'signals/comparison/{phenotype}.done'
    resources:
        time='00:01:00'
    shell:
        'signals/comp_peaks_to_regions.py {wildcards.phenotype} '

rule peak_stats:
    input:
        'workflow/phenotypes.py',
        [fname for phenotype in phenotypes.phenotypes_in_use
         for fname in 
         (f'signals/peaks/{phenotype}_500000_5e-8.tab',
          f'signals/peaks/{phenotype}_500000_5e-9.tab',
          f'signals/peaks/{phenotype}_500000_5e-10.tab',
          f'signals/peaks/{phenotype}_2000000_5e-8.tab')]
    output:
        'signals/peak_stats_summary.txt',
    resources:
        time='00:05:00'
    shell:
        'signals/peak_stats.py > signals/peak_stats_summary.txt ; '

rule peak_manhattan:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        manhattan_inputs,
        'signals/peaks/{phenotype}_{spacing}_{thresh}.tab'
    output:
        'association/plots/{phenotype,[^.]*}{binary_type,|.linear|.logistic}.manhattan.peaks_{spacing}_{thresh}.{ext,[^.]+}'
    resources:
        time='00:30:00',
        mem_gb=50
    run:
        cmd = (
            'association/interactive_manhattan_plot.py {wildcards.phenotype} {wildcards.ext} '
            '--peaks-spacing {wildcards.spacing} --peaks-thresh {wildcards.thresh} '
        )
        if not phenotypes.is_binary(wildcards.phenotype):
            assert wildcards.binary_type == ''
        else:
            assert wildcards.binary_type != ''
            cmd += f'--binary {wildcards.binary_type[1:]} '
        shell(cmd)

rule linear_overview_manhattan:
    input:
        my_str_run_readme=expand(rules.write_my_gwas_readme.output.readme, run_type='str', phenotype='{phenotype}', conditional='', binary=''),
        my_str_results=expand(rules.subset_my_gwas_results.output.subsetted_results, gwas_type='str', phenotype='{phenotype}'),
        plink_snp_log_file=expand(rules.run_linear_rin_plink_gwas.output.plinklog, chrom=21, suffix='', phenotype='{phenotype}'),
        plink_snp_results=expand(rules.append_mfi_to_subsetted_plink_results.output.mfi_npy, suffix='', phenotype='{phenotype}'),
        peaks_fname=expand(rules.generate_peaks.output.peaks, spacing=10000000, thresh='5e-8', phenotype='{phenotype}')
    output:
        manhattan='association/plots/{phenotype,[^.]*}.overview.manhattan.png'
    resources:
        time='00:30:00',
        mem_gb=75
    shell:
        'association/overview_manhattan_plot.py '
        '{wildcards.phenotype} '
        '{output.manhattan} '
        '{input.my_str_run_readme} '
        '{input.my_str_results} '
        '{input.plink_snp_log_file} '
        '{input.plink_snp_results} '
        '10000000 '
        '5e-8 '
        '{input.peaks_fname} '

# ----------- rerunning binary logistic regression associaiton on
# ----------- binary linear regression association regions

def regional_plink_imputed_snp_logistic_regressions(wildcards):
    assert phenotypes.is_binary(wildcards.phenotype)

    phenotype = wildcards.phenotype

    target_files = []
    for chrom, start, stop in generated_regions(phenotype):
        target_files.append(
            f'association/results/{phenotype}/plink_snp_logistic/batches/chr{chrom}_{start}_{stop}/plink2.{phenotype}.glm.logistic.hybrid.done'
        )

    return target_files

rule concatenate_all_regions_plink_imputed_snp_logistic_gwas:
    input:
        regional_plink_imputed_snp_logistic_regressions
    output:
        protected('association/results/{phenotype}/plink_snp_logistic/results.tab')
    resources:
        time='04:00:00'
    run:
        concatenate_csvs(output[0], input)

def regional_my_str_logistic_regressions(wildcards):
    assert phenotypes.is_binary(wildcards.phenotype)

    phenotype = wildcards.phenotype

    target_files = []
    for chrom, start, stop in generated_regions(phenotype):
        target_files.append(
            f"association/results/{phenotype}/my_str_logistic/batches/chr{chrom}_{start}_{stop}.tab"
        )

    return target_files

rule concatenate_all_regions_my_str_logistic_gwas:
    input:
        regional_my_str_logistic_regressions
    output:
        protected('association/results/{phenotype}/my_str_logistic/results.tab')
    resources:
        time='04:00:00'
    run:
        concatenate_csvs(output[0], input)

##################### Finemapping ##########################

#--------------FINEMAP-----------------

rule finemap_write_input_variants:
    input:
        'association/results/{phenotype}/my_str/results.tab',
        'association/results/{phenotype}/plink_snp/results.tab',
        'finemapping/str_imp_snp_overlaps/chr{chrom}_to_filter.tab'
    output:
        protected('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/README.txt'),
        protected('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_input.z'),
    resources:
        time = '00:30:00'
    shell:
        'finemapping/finemap_write_input_variants.py '
        '{wildcards.phenotype} {wildcards.chrom} {wildcards.start} '
        '{wildcards.end} '

rule finemap_load_gts:
    input:
        'sample_qc/runs/{phenotype}/combined_unrelated.sample',
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_input.z'
    output:
        protected('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_input.master'),
        temporary('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/gts.h5')
    resources:
        mem_gb = 6,
        time = '02:00:00'
    shell:
        'finemapping/finemap_load_gts.py '
        '{wildcards.phenotype} {wildcards.chrom} {wildcards.start} '
        '{wildcards.end} '
        f'{str_imputation_run_name} '

def finemap_corrs_time(wildcards, attempt):
    if attempt == 1:
        return '01:00:00'
    else:
        return '47:30:00'

rule finemap_calc_corrs:
    input:
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/gts.h5'
    output:
        temporary('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/lds.h5')
    resources:
        time = finemap_corrs_time,
        mem_gb = 4,
        attempt = lambda wildcards, attempt: attempt
    shell:
        'finemapping/finemap_calc_corrs.py '
        '{wildcards.phenotype} {wildcards.chrom} {wildcards.start} '
        '{wildcards.end} '

rule finemap_write_corrs_and_run:
    input:
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/README.txt',
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_input.z',
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_input.master',
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/lds.h5'
    output:
        temporary('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/all_variants.ld'),
        protected('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_output.snp'),
        protected('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_output.config')
    resources:
        time = finemap_corrs_time,
        mem_gb = 8,
        threads = 4,
        attempt = lambda wildcards, attempt: attempt
    shell:
        'finemapping/finemap_write_corrs_and_run.py '
        '{wildcards.phenotype} {wildcards.chrom} {wildcards.start} '
        '{wildcards.end} '

def all_finemap_dirs(phenotype):
    assert not phenotypes.is_binary(phenotype)
    return [
        f'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{stop}'
        for chrom, start, stop in generated_regions(phenotype)
    ]

rule run_finemap_phenotype:
    input:
        expand('{dir_}/finemap_output.snp', dir_=all_finemap_dirs, phenotype='{phenotype}')
    output:
        'finemapping/finemap_results/{phenotype}/all_signals_done'
    resources:
        time='00:01:00'
    shell:
        'touch finemapping/finemap_results/{wildcards.phenotype}/all_signals_done'

rule summarize_finemap_output:
    input:
        finemap_dirs = lambda wildcards: [f'{dir_}/finemap_output.snp' for dir_ in all_finemap_dirs(wildcards.phenotype)]
    output:
        'finemapping/finemap_results/{phenotype}/summary/summary.txt',
        'finemapping/finemap_results/{phenotype}/summary/best_STR_contribs.tab',
        'finemapping/finemap_results/{phenotype}/summary/best_STR_ranks.tab',
        'finemapping/finemap_results/{phenotype}/summary/avg_causal_count.png',
        'finemapping/finemap_results/{phenotype}/summary/str_contrib_fractions.png',
        'finemapping/finemap_results/{phenotype}/summary/single_str_contrib_fractions.png',
        'finemapping/finemap_results/{phenotype}/summary/str_rank.png',
        all_STR_contribs = 'finemapping/finemap_results/{phenotype}/summary/all_STR_contribs.tab'
    resources:
        time='00:30:00'
    run:
        shell(
            'finemapping/summarize_finemap_output.py '
            '{wildcards.phenotype} '
            'finemapping/finemap_results/{wildcards.phenotype}/summary '
            + str(n_regions_no_strs(wildcards.phenotype)) + 
            ' {input.finemap_dirs} '
        )

rule all_summaries:
    input:
        pheno_expand('finemapping/finemap_results/PHENO/summary/all_STR_contribs.tab')

rule manhattan_finemap:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        'association/plots/input/{phenotype}/my_str_results.tab',
        'association/plots/input/{phenotype}/plink_snp_results_with_mfi.npy',
        'signals/regions/{phenotype}.tab',
        'finemapping/finemap_results/{phenotype}/all_signals_done'
    output:
        manhattan='association/plots/{phenotype}{binary_type,|.linear|.logistic}.manhattan.FINEMAP.{ext}'
    resources:
        time='00:30:00',
        mem_gb=50
    run:
        cmd = (
            'association/interactive_manhattan_plot.py {wildcards.phenotype} {wildcards.ext} '
            '--finemap-signals '
        )
        if not phenotypes.is_binary(wildcards.phenotype):
            assert wildcards.binary_type == ''
        else:
            assert wildcards.binary_type != ''
            cmd += f'--binary {wildcards.binary_type[1:]} '
        shell(cmd)

#-------------------SuSiE----------------
def susie_mem(wildcards, attempt):
    if attempt == 1:
        return 30
    else:
        return 128

def susie_load_time(wildcards, attempt):
    if attempt == 1:
        return '00:30:00'
    else:
        return '12:00:00'

rule susie_load_gts:
    input:
        f'str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chrom}}.vcf.gz',
        'association/results/{phenotype}/plink_snp/results.tab',
        'association/results/{phenotype}/my_str/results.tab',
        'finemapping/str_imp_snp_overlaps/chr{chrom}_to_filter.tab'
    output:
        protected('finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/README.txt'),
        temporary('finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/pheno_residuals.npy'),
        temporary('finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/gt_residuals.npy')
    resources:
        time = susie_load_time,
        mem_gb = susie_mem,
        attempt = lambda wildcards, attempt: attempt
    shell:
        'finemapping/susie_load_gts.py '
        f'{str_imputation_run_name} '
        '{wildcards.phenotype} {wildcards.chrom} {wildcards.start} '
        '{wildcards.end} '

def susie_run_time(wildcards, attempt):
    if attempt == 1:
        return '00:45:00'
    else:
        return '12:00:00'

rule susie_run:
    input:
        'finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/README.txt',
        'finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/pheno_residuals.npy',
        'finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/gt_residuals.npy',
    output:
        protected('finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/alpha.tab'),
        protected('finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/lbf.tab'),
        protected('finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/lbf_variable.tab'),
        protected('finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/sigma2.txt'),
        protected('finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/V.tab'),
        protected('finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/converged.txt'),
        protected('finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/lfsr.tab'),
        protected('finemapping/susie_results/{phenotype}/{chrom}_{start}_{end}/requested_coverage.txt'),
        #also all the csN.txt files, just an unknown number of them
        #consuming jobs should consume alpha.tab
    resources:
        time = susie_run_time,
        mem_gb = susie_mem,
        attempt = lambda wildcards, attempt: attempt
    conda:
        'envs/ukb_susier.env.yml'
    shell:
        'Rscript finemapping/susie_run.r '
        '{wildcards.phenotype} {wildcards.chrom} {wildcards.start} '
        '{wildcards.end} '

def collect_susie_output_all_regions(wildcards):
    assert not phenotypes.is_binary(wildcards.phenotype)
    phenotype = wildcards.phenotype
    files = []
    # make sure we've loaded all input variants for all regions
    target_files = []
    for chrom, start, stop in generated_regions(phenotype):
        target_files.append(
            f'finemapping/susie_results/{phenotype}/{chrom}_{start}_{stop}/alpha.tab'
        )

    return target_files

rule run_susie_phenotype:
    input:
        collect_susie_output_all_regions
    output:
        'finemapping/susie_results/{phenotype}/all_signals_done'
    resources:
        time='00:01:00'
    shell:
        'touch finemapping/susie_results/{wildcards.phenotype}/all_signals_done'

rule susie_all_phenotypes:
    input:
        pheno_expand('finemapping/susie_results/PHENO/all_signals_done')

# ----- finemapping summaries ----------
rule sort_gencode:
    input:
        'misc_data/gencode/gencode.v38lift37.annotation.gff3'
    output:
        temporary('misc_data/gencode/gencode.v38lift37.annotation.without_chr.gff3'),
        'misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.gff3'
    resources:
        time='00:30:00'
    shell:
        "sed -e 's/^chr//' {input[0]} > {output[0]} ; "
        'bedtools sort -i {output[0]} > {output[1]} '

rule gencode_extract_feature:
    input:
        'misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.gff3'
    output:
        'misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.{feature_type}.gff3'
    resources:
        time='00:30:00'
    shell:
        "awk '{{ if ($3 == \"{wildcards.feature_type}\") {{ print $0 ; }} }}' {input[0]} > {output[0]} "

cut_str_gencode_command = "cut -d $'\\t' -f 1-3,11-13,15- "

rule str_closest_updownstream_feature:
    input:
        vcf='snpstr/flank_trimmed_vcf/chr{chrom}.vcf.gz',
        index_file='snpstr/info_field/chr{chrom}.vcf.gz.tbi',
        gencode_feature='misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.{feature_type}.gff3'
    output:
        'side_analyses/str_annotations/closest{direction,|_upstream|_downstream}{coding,|_protein_coding}_{feature_type,exon|CDS|UTR|five_prime_UTR|three_prime_UTR|transcript|gene}{support,|_support_[1-5]}/chr{chrom}.tab'
    resources:
        time='00:30:00'
    run:
        if wildcards.direction == '_upstream':
            stream_opt = ' -D b -id '
        elif wildcards.direction == '_downstream':
            stream_opt = ' -D b -iu '
        else:
            assert wildcards.direction == ''
            stream_opt = ' -d '

        if wildcards.coding != '':
            grep_cmd = " | grep 'gene_type=protein_coding' "
        else:
            grep_cmd = ''

        if wildcards.support != '':
            supports = " ".join(str(x) for x in range(1, int(wildcards.support.split('_')[-1]) + 1))
            b_file = (
                "for level in " + supports + " ; do "
                'grep "transcript_support_level=${{level}}" {input.gencode_feature} '
                + grep_cmd +
                " ; done | sort -k 1,1 -k 4,4n "
            )
        else:
            b_file = 'cat {input.gencode_feature} ' + grep_cmd

        shell(
            'bedtools closest -t first '
            + stream_opt +
            '-a {input.vcf} -b <( '
            + b_file +
            " ) | "
             + cut_str_gencode_command +
             '> {output[0]}'
         )

rule str_nearby_features:
    input:
        vcf='snpstr/flank_trimmed_vcf/chr{chrom}.vcf.gz',
        index_file='snpstr/info_field/chr{chrom}.vcf.gz.tbi',
        gencode_feature='misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.{feature_type}.gff3'
    output:
        'side_analyses/str_annotations/nearby_{feature_type}_d_{distance}/chr{chrom}.tab'
    resources:
        time='00:30:00'
    shell:
        ('bedtools window -w {wildcards.distance} -a {input.vcf} -b {input.gencode_feature} | ' +
         cut_str_gencode_command +
         '> {output[0]}')

rule str_intersects_feature:
    input:
        vcf='snpstr/flank_trimmed_vcf/chr{chrom}.vcf.gz',
        index_file='snpstr/info_field/chr{chrom}.vcf.gz.tbi',
        gencode_feature='misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.{feature_type}.gff3'
    output:
        'side_analyses/str_annotations/intersects{coding,|_protein_coding}_{feature_type,exon|CDS|UTR|five_prime_UTR|three_prime_UTR|transcript|gene}{support,|_support_[1-5]}/chr{chrom}.tab'
    resources:
        time='00:30:00'
    run:
        if wildcards.coding != '':
            grep_cmd = " | grep 'gene_type=protein_coding' "
        else:
            grep_cmd = ''

        if wildcards.support != '':
            supports = " ".join(str(x) for x in range(1, int(wildcards.support.split('_')[-1]) + 1))
        else:
            supports = '1 2 3 4 5 NA' #anything goes

        shell(
            "bedtools intersect -wo -a {input.vcf} -b "
            "<(for level in " + supports + " ; do "
                'grep "transcript_support_level=${{level}}" {input.gencode_feature} '
                + grep_cmd +
            " ; done | sort -k 1,1 -k 4,4n ) | "
            + cut_str_gencode_command +
            '> {output[0]}'
         )

rule enrichments:
    input:
        'snpstr/flank_trimmed_vcf/vars.tab',
        'snpstr/str_loci.txt',
        'snpstr/repeat_units.tab',
        'misc_data/stalling/canon_structure.tab',
        chr_expand('export_scripts/intermediate_results/chrCHR_loci_summary.tab'),
        'misc_data/eSTR/eSTRs.csv',
        'misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.gene.gff3',
        chr_expand('side_analyses/str_annotations/intersects_protein_coding_CDS_support_2/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_protein_coding_UTR_support_2/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_protein_coding_five_prime_UTR_support_2/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_protein_coding_three_prime_UTR_support_2/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_transcript_support_2/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/closest_downstream_protein_coding_exon_support_2/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/closest_upstream_protein_coding_exon_support_2/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/closest_downstream_protein_coding_gene/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/closest_upstream_protein_coding_gene/chrCHR.tab'),
        pheno_expand('association/results/PHENO/my_str/results.tab'),
        pheno_expand('finemapping/finemap_results/PHENO/summary/all_STR_contribs.tab')
    output:
        'side_analyses/str_annotations/all_STRs.tab',
        'post_finemapping/results/enrichments.tab',
        'post_finemapping/results/upstream_gene_dist_cdf_50kbp.png',
        'post_finemapping/results/upstream_gene_dist_cdf.png',
        'post_finemapping/results/downstream_gene_dist_cdf_50kbp.png',
        'post_finemapping/results/downstream_gene_dist_cdf.png',
        'post_finemapping/results/upstream_exon_dist_cdf_50kbp.png',
        'post_finemapping/results/upstream_exon_dist_cdf.png',
        'post_finemapping/results/downstream_exon_dist_cdf_50kbp.png',
        'post_finemapping/results/downstream_exon_dist_cdf.png',
        'post_finemapping/results/mean_len_cdf.png',
        'post_finemapping/results/upstream_gene_dist_cdf_50kbp.pdf',
        'post_finemapping/results/upstream_gene_dist_cdf.pdf',
        'post_finemapping/results/downstream_gene_dist_cdf_50kbp.pdf',
        'post_finemapping/results/downstream_gene_dist_cdf.pdf',
        'post_finemapping/results/upstream_exon_dist_cdf_50kbp.pdf',
        'post_finemapping/results/upstream_exon_dist_cdf.pdf',
        'post_finemapping/results/downstream_exon_dist_cdf_50kbp.pdf',
        'post_finemapping/results/downstream_exon_dist_cdf.pdf',
        'post_finemapping/results/mean_len_cdf.pdf',
        'post_finemapping/results/FINEMAP_FM_eSTR_relative_rate.png',
        'post_finemapping/results/FINEMAP_UTR3_relative_rate.png',
        'post_finemapping/results/FINEMAP_UTR5_relative_rate.png',
        'post_finemapping/results/FINEMAP_any_stalling_struture_relative_rate.png',
        'post_finemapping/results/FINEMAP_eSTR_relative_rate.png',
        'post_finemapping/results/FINEMAP_exonic_relative_rate.png',
        'post_finemapping/results/FINEMAP_intergenic_relative_rate.png',
        'post_finemapping/results/FINEMAP_intronic_relative_rate.png',
        'post_finemapping/results/FINEMAP_period_is_1_relative_rate.png',
        'post_finemapping/results/FINEMAP_period_is_2_relative_rate.png',
        'post_finemapping/results/FINEMAP_period_is_3_relative_rate.png',
        'post_finemapping/results/FINEMAP_period_is_4_relative_rate.png',
        'post_finemapping/results/FINEMAP_period_is_5_relative_rate.png',
        'post_finemapping/results/FINEMAP_period_is_6_relative_rate.png',
        'post_finemapping/results/FINEMAP_promoter_relative_rate.png',
        'post_finemapping/results/FINEMAP_structure_is_HAIRP_relative_rate.png',
        'post_finemapping/results/FINEMAP_structure_is_IMOT_relative_rate.png',
        'post_finemapping/results/FINEMAP_structure_is_QUAD_relative_rate.png',
        'post_finemapping/results/FINEMAP_transcribed_non_protein_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_A_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_AC_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_AT_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_AG_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_AAT_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_AAC_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_AAAT_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_AAAC_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_AGAC_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_AAAG_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_AAGG_relative_rate.png',
        'post_finemapping/results/FINEMAP_unit_is_AATG_relative_rate.png',
        'post_finemapping/results/FINEMAP_prob_counts.png',
        'post_finemapping/results/FINEMAP_FM_eSTR_relative_rate.svg',
        'post_finemapping/results/FINEMAP_UTR3_relative_rate.svg',
        'post_finemapping/results/FINEMAP_UTR5_relative_rate.svg',
        'post_finemapping/results/FINEMAP_any_stalling_struture_relative_rate.svg',
        'post_finemapping/results/FINEMAP_eSTR_relative_rate.svg',
        'post_finemapping/results/FINEMAP_exonic_relative_rate.svg',
        'post_finemapping/results/FINEMAP_intergenic_relative_rate.svg',
        'post_finemapping/results/FINEMAP_intronic_relative_rate.svg',
        'post_finemapping/results/FINEMAP_period_is_1_relative_rate.svg',
        'post_finemapping/results/FINEMAP_period_is_2_relative_rate.svg',
        'post_finemapping/results/FINEMAP_period_is_3_relative_rate.svg',
        'post_finemapping/results/FINEMAP_period_is_4_relative_rate.svg',
        'post_finemapping/results/FINEMAP_period_is_5_relative_rate.svg',
        'post_finemapping/results/FINEMAP_period_is_6_relative_rate.svg',
        'post_finemapping/results/FINEMAP_prob_counts.svg',
        'post_finemapping/results/FINEMAP_promoter_relative_rate.svg',
        'post_finemapping/results/FINEMAP_structure_is_HAIRP_relative_rate.svg',
        'post_finemapping/results/FINEMAP_structure_is_IMOT_relative_rate.svg',
        'post_finemapping/results/FINEMAP_structure_is_QUAD_relative_rate.svg',
        'post_finemapping/results/FINEMAP_transcribed_non_protein_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_A_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_C_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_AC_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_AT_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_AG_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_AAT_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_AAC_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_AAAT_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_AAAC_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_AGAC_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_AAAG_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_AAGG_relative_rate.svg',
        'post_finemapping/results/FINEMAP_unit_is_AATG_relative_rate.svg',
    shell:
        './post_finemapping/enrichments.py {phenotypes.phenotypes_in_use} ' 

checkpoint summary_table:
    input:
        'workflow/phenotypes.py',
        chr_expand('side_analyses/str_annotations/closest_gene/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/closest_exon/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/nearby_exon_d_1000/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/nearby_gene_d_100000/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_gene/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_exon/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_CDS/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_five_prime_UTR/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_three_prime_UTR/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_UTR/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_transcript/chrCHR.tab'),
        results = expand(rules.concatenate_my_str_gwas.output.results, suffix='', phenotype='{phenotype}'),
        all_STR_contribs = rules.summarize_finemap_output.output.all_STR_contribs,
    output:
        readme = 'finemapping/summary/{phenotype}_table_README.txt',
        table = 'finemapping/summary/{phenotype}_table.tab',
    resources:
        time='05:00:00',
        mem_gb = 75
    run:
        STRs = ''
        URLs = ''
        first = True
        for STR, url in phenotypes.pheno_descs[wildcards.phenotype].previous_STR_findings:
            if not first:
                STRs += ' '
                URLs += ' '
            first = False
            STRs += STR
            URLs += url

        exciting_STRs = ''
        first = True
        for STR in phenotypes.pheno_descs[wildcards.phenotype].exciting_STR_hits:
            if not first:
                exciting_STRs += ' '
            first = False
            exciting_STRs += STR

        command = (
            'finemapping/collate_strong_associations.py '
            f'{wildcards.phenotype} '
            f"'{phenotypes.pheno_descs[wildcards.phenotype].unit}' "
            f'{output.readme} '
            f'{output.table} '
            f'{input.results} '
            f'{input.all_STR_contribs} '
        )
        if STRs:
            command += ' --previous-STR-findings ' + STRs
            command += ' --previous-STR-finding-URLs ' + URLs
        if exciting_STRs:
            command += ' --cool-loci ' + exciting_STRs
        shell(command)

rule finemap_signal_strengths:
    input:
        rules.summary_table.output.table
    output:
        graph='finemapping/finemap_results/{phenotype}/summary/signal_strengths.html'
    resources:
        time='00:30:00',
        mem_gb = 50
    shell:
        'finemapping/plot_finemap_association_strengths.py {wildcards.phenotype}'

######################### Create Files to Export ########################

rule locus_summary_inputs:
    input:
        f'str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chrom}}.vcf.gz',
        'sample_qc/runs/no_phenotype/combined.sample'
    output:
        'export_scripts/intermediate_results/chr{chrom}_loci_summary.tab'
    resources:
        time = '23:45:00',
        mem_gb=5
    shell:
        f'export_scripts/loci_stat_inputs.py {str_imputation_run_name} '
        '{wildcards.chrom} '

rule summarize_loci:
    input:
        [f'export_scripts/intermediate_results/chr{chrom}_loci_summary.tab' for chrom in range(1, 23)]
    output:
        'export_scripts/results/allele_count_thresh_0.001.png',
        'export_scripts/results/allele_count_thresh_0.001.svg',
        'export_scripts/results/allele_count_thresh_0.004.png',
        'export_scripts/results/allele_count_thresh_0.004.svg',
        'export_scripts/results/allele_count_thresh_0.015.png',
        'export_scripts/results/allele_count_thresh_0.015.svg',
        'export_scripts/results/allele_count_thresh_0.06.png',
        'export_scripts/results/allele_count_thresh_0.06.svg'
    resources:
        time='00:30:00',
        mem_gb=5
    shell:
        'export_scripts/loci_stats.py '

rule create_phenotypes_table:
    input:
        'workflow/phenotypes.py',
        pheno_expand("sample_qc/runs/PHENO/combined_unrelated.sample"),
        pheno_expand('signals/peaks/PHENO_500000_5e-8.tab'),
        pheno_expand('signals/comparison/PHENO.done')
    output:
        'export_scripts/results/phenotypes.tab',
        'export_scripts/results/phenotypes_README.txt'
    resources:
        time='00:02:00'
    shell:
        'export_scripts/make_pheno_table.py {phenotypes.phenotypes_in_use} '

rule concat_finemapping_summary_tables:
    input:
        'workflow/phenotypes.py',
        tables=expand(rules.summary_table.output.table, phenotype=phenotypes.phenotypes_in_use)
    output:
        table='export_scripts/results/finemapping_summary_all_phenotypes.tab'
    resources:
        time = '00:10:00'
    run:
        cmd = 'export_scripts/concat_summary_tables.py {output[0]} '
        cmd += "'{" + json.dumps({phen: table for (phen, table) in zip(phenotypes.phenotypes_in_use, input.tables)}) + "}'"
        shell(cmd)

rule concat_and_filter_finemapping_summary_tables:
    input:
        'workflow/phenotypes.py',
        expand(rules.summary_table.output.table, phenotype=phenotypes.phenotypes_in_use)
    output:
        'export_scripts/results/putatively_causal_STRs.tab',
        'export_scripts/results/putatively_causal_STRs_README.txt',
        'export_scripts/results/curated_STRs.tab',
        'export_scripts/results/curated_STRs_README.txt'
    resources:
        time='00:10:00'
    run:
        cmd = 'export_scripts/concat_and_filter_summary_tables.py '
        for phenotype in phenotypes.phenotypes_in_use:
            cmd += f'{phenotype} '
        shell(cmd)

rule exonic_finemapped_strs:
    input:
        'workflow/phenotypes.py',
        tables=expand(rules.summary_table.output.table, phenotype=phenotypes.phenotypes_in_use)
    output:
        table='export_scripts/results/exonic_finemapped_STRs.tab',
        readme='export_scripts/results/exonic_finemapped_STRs_README.txt'
    resources:
        time = '00:10:00'
    run:
        cmd = 'export_scripts/exonic_finemapped_strs.py {output.table} {output.readme} '
        cmd += "'{" + json.dumps({phen: table for (phen, table) in zip(phenotypes.phenotypes_in_use, input.tables)}) + "}'"
        shell(cmd)

rule assoc_figures:
    input:
        'association/plots/input/eosinophil_count/my_imputed_snp_chr21_results.tab',
        'association/results/eosinophil_count/plink_snp/results.tab',
        'association/results/total_bilirubin/plink_snp/results.tab'
    output:
        'export_scripts/results/validate_our_code.png',
        'export_scripts/results/panukbb_scatter.svg',
        'export_scripts/results/panukbb_scatter.png'
    resources:
        time='00:10:00',
        mem_gb=20
    shell:
        'export_scripts/assoc_figs.py'

rule peak_figs:
    input:
        'workflow/phenotypes.py',
        pheno_expand('signals/peaks/PHENO_250000_5e-8.tab')
    output:
        'export_scripts/results/peaks_by_pheno.svg',
        'export_scripts/results/peaks_by_pheno.png',
        'export_scripts/results/p_val_comp_jitter_scatter.png',
        'export_scripts/results/p_val_comp_jitter_scatter.svg'
    resources:
        time='01:00:00',
        mem_gb=5
    shell:
        f'export_scripts/signal_summary_images.py {" ".join(phenotypes.phenotypes_in_use)} '


######################### Export Files ########################

def link_file(input_, output_):
    input_ = '../'*output_.count('/') + input_
    shell(f"ln -s {input_} {output_}")

def link_files(inputs, outputs):
    for input_, output_ in zip(inputs, outputs):
        link_file(input_, output_)

rule export_phenotype_summaries:
    input:
        expand(rules.generate_peaks.output.peaks, zip,
            spacing=[250000, 500000, 2000000, 250000, 250000],
            thresh=['5e-8', '5e-8', '5e-8', '5e-9', '5e-10'],
            phenotype=['{phenotype}']*5),
        expand(rules.generate_peaks.output.readme, spacing=250000, thresh='5e-8', phenotype='{phenotype}'),
        rules.summary_table.output.readme,
        rules.summary_table.output.table,
        rules.finemap_signal_strengths.output.graph,
        expand(rules.manhattan_finemap.output.manhattan, binary_type='', ext='html', phenotype='{phenotype}'),
        rules.linear_overview_manhattan.output.manhattan
    output:
        # owns all symlinks in this directory
        complete='export/phenotypes/{phenotype}/.exported'
    resources:
        time='00:05:00',
        mem_gb=5 # got OOM error for this job, don't know why
    run:
        # delete all symlinks in the out directory before running
        out_dir = output.complete[:output.complete.rfind('/')] # strip the file off of the directory
        out_links = [path for path in pathlib.PosixPath(out_dir).iterdir() if path.is_symlink()]
        for path in out_links:
            path.unlink()

        for file_ in input:
            link_file(
                file_,
                f'export/phenotypes/{wildcards.phenotype}/' + 
                    file_.replace('/', '_').replace(f'_{wildcards.phenotype}', '')
            )

        shell(f"touch {output.complete}")

def phenotype_hit_highlights(wildcards):
    checkpoints.summary_table.get(phenotype=wildcards.phenotype)
    phenotype = wildcards.phenotype
    # TODO this should be settable: 'included_only_due_to_literature': float
    # TODO this should be settable: 'included_only_due_to_literature': curation 
    # TODO this should be inferred: 'association_p_value': float
    # comparison to string shouldn't cause casting
    # ask for dtype flag, not just dtypes?
    results = polars.read_csv(
        expand(rules.summary_table.output.table, phenotype=phenotype)[0],
        sep='\t',
        dtype={'alleles': str, 'association_p_value': float},
        null_values='NA'
    )
    results = results[
        (results['association_p_value'] <= 1e-10) &
        (
            results['mentioned_in_literature'] |
            results['curated'] |
            (results['pcausal'] >= 0.8)
        )
    ]
    return (
        *expand(
            rules.manhattan_conditional.output.manhattan,
            phenotype=phenotype,
            condition=results['signal_region'] + '_STR_' + results['SNPSTR_start_pos'] + '__ISNP__ASNP',
            ext='png',
        ),
        *expand(
            rules.plot_str_locus.output.png,
            zip,
            phenotype=[phenotype]*results.shape[0],
            chrom=results['chrom'],
            pos=results['SNPSTR_start_pos'],
            dosage_fraction_threshold=['0.001']*results.shape[0]
        ),
        *expand(
            rules.plot_str_locus.output.svg,
            zip,
            phenotype=[phenotype]*results.shape[0],
            chrom=results['chrom'],
            pos=results['SNPSTR_start_pos'],
            dosage_fraction_threshold=['0.001']*results.shape[0]
        )
    )

rule export_phenotype_hit_highlights:
    input:
        phenotype_hit_highlights
    output:
        # owns all symlinks in this directory
        complete='export/phenotypes/{phenotype}/loci/.exported'
    resources:
        time='00:05:00'
    run:
        # delete all symlinks in the out directory before running
        out_dir = output.complete[:output.complete.rfind('/')] # strip the file off of the directory
        out_links = [path for path in pathlib.PosixPath(out_dir).iterdir() if path.is_symlink()]
        for path in out_links:
            path.unlink()

        # link new files
        for file_ in input:
            outfname = file_.split('/')[-1]
            outfname = re.sub(f'{wildcards.phenotype}(.|_)', '', outfname) 
            link_file(file_, f'{out_dir}/{outfname}')
        shell(f'touch {output.complete}')

def curated_hit_highlights(wildcards):
    files = []
    for phenotype in phenotypes.phenotypes_in_use:
        for loc in phenotypes.pheno_descs[phenotype].exciting_STR_hits:
            chrom, str_pos = [int(x) for x in loc.split(':')]
            files.append(expand(
                [rules.plot_str_locus.output.svg, rules.plot_str_locus.output.png],
                phenotype=phenotype,
                chrom=chrom,
                pos=str_pos,
                dosage_fraction_threshold='0.001'
            )[0])
            found_region = False

            for region_chrom, region_start, region_stop, in generated_regions(phenotype):
                if chrom == region_chrom and region_start <= str_pos <= region_stop:
                    files.append(expand(
                        rules.manhattan_conditional.output.manhattan,
                        phenotype=phenotype,
                        condition=f'{chrom}_{region_start}_{region_stop}_STR_{str_pos}__ISNP__ASNP',
                        ext='png',
                    )[0])
                    found_region = True
                    break
            if not found_region:
                print(phenotype, chrom, str_pos)
                assert False
    return files

rule export_curated_hit_highlights:
    input:
        'workflow/phenotypes.py',
        hits=curated_hit_highlights
    output:
        # owns all symlinks in this directory
        complete='export/combined/curated_loci/.exported'
    resources:
        time='00:05:00'
    run:
        # delete all symlinks in the out directory before running
        out_dir = output.complete[:output.complete.rfind('/')] # strip the file off of the directory
        out_links = [path for path in pathlib.PosixPath(out_dir).iterdir() if path.is_symlink()]
        for path in out_links:
            path.unlink()

        # link new files
        for file_ in input.hits:
            link_file(file_, out_dir + '/' + file_.split('/')[-1])
        shell(f'touch {output.complete}')

rule export_curated_hit_table:
    input:

rule export_combined_summaries_and_figures:
    input:
        'export_scripts/results/phenotypes.tab',
        'export_scripts/results/phenotypes_README.txt',
        'export_scripts/results/putatively_causal_STRs.tab',
        'export_scripts/results/putatively_causal_STRs_README.txt',
        'export_scripts/results/curated_STRs.tab',
        'export_scripts/results/curated_STRs_README.txt',
        'export_scripts/results/exonic_finemapped_STRs.tab',
        'export_scripts/results/exonic_finemapped_STRs_README.txt',
        'export_scripts/results/validate_our_code.png',
        'export_scripts/results/panukbb_scatter.png',
        'export_scripts/results/panukbb_scatter.svg',
        'export_scripts/results/peaks_by_pheno.svg',
        'export_scripts/results/peaks_by_pheno.png',
        'export_scripts/results/p_val_comp_jitter_scatter.svg',
        'export_scripts/results/p_val_comp_jitter_scatter.png',
        'export_scripts/results/allele_count_thresh_0.001.png',
        'export_scripts/results/allele_count_thresh_0.001.svg',
        'export_scripts/results/allele_count_thresh_0.004.png',
        'export_scripts/results/allele_count_thresh_0.004.svg',
        'export_scripts/results/allele_count_thresh_0.015.png',
        'export_scripts/results/allele_count_thresh_0.015.svg',
        'export_scripts/results/allele_count_thresh_0.06.png',
        'export_scripts/results/allele_count_thresh_0.06.svg',
        'export_scripts/results/finemapping_summary_all_phenotypes.tab'
    output:
        'export/combined/phenotypes.tab',
        'export/combined/phenotypes_README.txt',
        'export/combined/putatively_causal_STRs.tab',
        'export/combined/putatively_causal_STRs_README.txt',
        'export/combined/curated_STRs.tab',
        'export/combined/curated_STRs_README.txt',
        'export/combined/exonic_finemapped_STRs.tab',
        'export/combined/exonic_finemapped_STRs_README.txt',
        'export/combined/validate_our_code.png',
        'export/combined/panukbb_scatter.png',
        'export/combined/panukbb_scatter.svg',
        'export/combined/peaks_by_pheno.svg',
        'export/combined/peaks_by_pheno.png',
        'export/combined/p_val_comp_jitter_scatter.svg',
        'export/combined/p_val_comp_jitter_scatter.png',
        'export/combined/allele_count_thresh_0.001.png',
        'export/combined/allele_count_thresh_0.001.svg',
        'export/combined/allele_count_thresh_0.004.png',
        'export/combined/allele_count_thresh_0.004.svg',
        'export/combined/allele_count_thresh_0.015.png',
        'export/combined/allele_count_thresh_0.015.svg',
        'export/combined/allele_count_thresh_0.06.png',
        'export/combined/allele_count_thresh_0.06.svg',
        'export/combined/finemapping_summary_all_phenotypes.tab'
    resources:
        time='00:05:00'
    run:
        # delete all symlinks in the out directory before running
        out_links = [path for path in pathlib.PosixPath('export/combined').iterdir() if path.is_symlink()]
        for path in out_links:
            path.unlink()

        link_files(input, output)

rule export_all:
    input:
        'workflow/phenotypes.py',
        # temp stand in to make susie run
        # pheno_expand('finemapping/susie_results/PHENO/all_signals_done'),
        # --- per phenotype ---
        expand(rules.export_phenotype_summaries.output.complete, phenotype=phenotypes.phenotypes_in_use),
        expand(rules.export_phenotype_hit_highlights.output.complete, phenotype=phenotypes.phenotypes_in_use),

        # -- combined ---
        'export/combined/curated_loci/.exported',
        # stand in for combined and figures 
        'export/combined/phenotypes.tab',

