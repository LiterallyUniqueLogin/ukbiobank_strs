import collections
import csv

import numpy as np
import pandas as pd
import shutil

import python_array_utils as utils

chr_lens = np.genfromtxt(
    'misc_data/genome/chr_lens.txt',
    usecols=[1],
    skip_header=1,
    dtype=int
)

class PhenotypeLoadingArg:
    def __init__(
            self,
            data_field_id,
            *,
            unit = 'binary',
            categorical_covars = [],
            previous_STR_findings = [], # format "chr:pos"
            previous_SNP_findings = []): # unsure of format yet
        self.data_field_id = data_field_id
        self.unit = unit
        self.categorical_covars = categorical_covars
        self.previous_STR_findings = previous_STR_findings
        self.previous_SNP_findings = previous_SNP_findings

pheno_args = {
    'height': PhenotypeLoadingArg(
        '50',
        unit = 'cm',
        previous_STR_findings = ["3:53128363"]
    ),
    # blood biochemistry phenotypes https://biobank.ndph.ox.ac.uk/showcase/label.cgi?id=17518
    # and related QC fields https://biobank.ndph.ox.ac.uk/showcase/label.cgi?id=18518
    # Due to the companion doc, I think I'm going to include aliquot as a covariate
    # (section 7.2)
    # companion documents:
    # https://biobank.ndph.ox.ac.uk/showcase/refer.cgi?id=5636
    # https://biobank.ndph.ox.ac.uk/showcase/ukb/docs/biomarker_issues.pdf
    # (I've found this second one less useful)
    # https://biobank.ndph.ox.ac.uk/showcase/refer.cgi?id=1227
    # https://biobank.ndph.ox.ac.uk/showcase/ukb/docs/serum_biochemistry.pdf
    'total_bilirubin': PhenotypeLoadingArg(
        '30840',
        unit = 'umol/L',
        previous_STR_findings = ["2:234668880"]
    ),
    'ldl_cholesterol_direct': PhenotypeLoadingArg(
        '30780',
        unit = 'mmol/L'
    ),
    'hdl_cholesterol': PhenotypeLoadingArg(
        '30760',
        unit = 'mmol/L',
        categorical_covars = [('hdl_cholesterol_aliquot', '30762')]
    ),
    # blood count phenotypes https://biobank.ndph.ox.ac.uk/showcase/label.cgi?id=100081
    # 'crit' values are percentage of blood volume occupied by that cell type
    # overview here https://biobank.ndph.ox.ac.uk/showcase/refer.cgi?id=1453
    # https://biobank.ndph.ox.ac.uk/showcase/ukb/docs/haematology.pdf
    'white_blood_cell_count': PhenotypeLoadingArg(
        '30000',
        unit = '10^9 cells/Liter',
        categorical_covars = [('white_blood_cell_count_device_id', '30003')]
    ),
    'red_blood_cell_count': PhenotypeLoadingArg(
        '30010',
        unit = '10^12 cells/Liter',
        categorical_covars = [('red_blood_cell_count_device_id', '30013')]
    ),
   'haematocrit': PhenotypeLoadingArg(
        '30030',
        unit = '%',
        categorical_covars = [('hematocrit_device_id', '30033')]
    ),
   'haemoglobin_concentration': PhenotypeLoadingArg(
       '30020',
       unit = 'g/dL',
       categorical_covars = [('haemoglobin_concentration_device_id', '30023')]
   ),
   'platelet_count': PhenotypeLoadingArg(
        '30080',
        unit = '10^9 cells/Litre',
        categorical_covars = [('platelet_count_device_id', '30083')]
    ),
    'platelet_crit': PhenotypeLoadingArg(
        '30090',
        unit = '%',
        categorical_covars = [('platelet_crit_device_id', '30093')]
    ),
    'lymphocyte_count': PhenotypeLoadingArg(
        '30120',
        unit = '10^9 cells/Litre',
        categorical_covars = [('lymphocyte_count_device_id', '30123')]
    ),
    'lymphocyte_percent': PhenotypeLoadingArg(
        '30180',
        unit = '%',
        categorical_covars = [('lymphocyte_percent_device_id', '30183')]
    ),
    'neutrophil_count': PhenotypeLoadingArg(
        '30140',
        unit = '10^9 cells/Litre',
        categorical_covars = [('neutrophil_count_device_id', '30143')]
    ),
    'neutrophil_percent': PhenotypeLoadingArg(
        '30200',
        unit = '%',
        categorical_covars = [('neutrophil_percent_device_id', '30203')]
    ),
    'eosinophil_count': PhenotypeLoadingArg(
        '30150',
        unit = '10^9 cells/Litre',
        categorical_covars = [('eosinophil_count_device_id', '30153')]
    ),
    'eosinophil_percent': PhenotypeLoadingArg(
        '30210',
        unit = '%',
        categorical_covars = [('eosinophil_percent_device_id', '30213')]
    ),

    # blood pressure - combine 4079, 94, 4080, 93,  with covars 36,37 - all category 100011
    # --- Spirometry ---
    # could study FEV and FVC z-scores (20257, 20256)
    # but those are just z-scores for those values regressed on
    # age, height and gender among lifelong non-smokers with no history of lung disease
    # we can compute that ourselves, so I don't see any reason to study these separately
    # maybe we should study lung function separately in smokers and nonsmokers
    # probably using direct question 20116 over derived field 20160
    # Spirometry: device number 3132, device id 42
    # lots of different devices used with only a few thousand per device
    # so it doesn't make sense to add that as a categorical variable
    # could add it as a random component if I was using a mixed effect model
    # 3062Forced vital capacity (FVC)
    # 3063Forced expiratory volume in 1-second (FEV1)
    # should I remove 3088,89,90? or 3159?
}

rule load_shared_covars:
    input:
        "main_dataset/extracted_data/assessment_ages_21003.txt"
    output:
        protected("traits/shared_covars/shared_covars.npy"),
        protected("traits/shared_covars/assessment_ages.npy"),
        protected("traits/shared_covars/README.txt"),
        protected("traits/shared_covars/covar_names.txt")
    resources:
        time='00:15:00',
        mem_gb=10
    shell:
        "traits/load_shared_covars.py"

rule decompress_field:
    input:
        'main_dataset/raw_data/ukb46781.enc_ukb',
        'main_dataset/raw_data/ukb46782.enc_ukb'
    output:
        protected("main_dataset/extracted_data/{field_name}_{field_id}.txt"),
        protected("main_dataset/extracted_data/{field_name}_{field_id}_README.txt")
    resources:
        time='05:00:00'
    shell:
        "main_dataset/decompress_trait.py {wildcards.field_name} {wildcards.field_id} "

def input_fields_for_phenotype(wildcards):
    phenotype = wildcards.phenotype
    if phenotype in pheno_args:
        args = pheno_args[phenotype]
    else:
        raise ValueError(f"Couldn't identify phenotype {phenotype}")
    return [
        f"main_dataset/extracted_data/{wildcards.phenotype}_{args.data_field_id}.txt",
        *[f"main_dataset/extracted_data/{covar_field_name}_{covar_field_id}.txt" for
          covar_field_name, covar_field_id in args.categorical_covars]
    ]

rule load_phenotype:
    input:
        "traits/shared_covars/assessment_ages.npy",
        input_fields_for_phenotype
    output:
        protected("traits/phenotypes/{phenotype}.npy"),
        protected("traits/phenotypes/{phenotype}_README.txt"),
        protected("traits/phenotypes/{phenotype}_unit.txt"),
        protected("traits/phenotypes/{phenotype}_covar_names.txt")
    resources:
        time='00:05:00'
    run:
        phenotype = wildcards.phenotype
        if phenotype in pheno_args:
            args = pheno_args[phenotype]
            assert args.unit != 'binary'
            base_command = (
                f"traits/load_phenotype_from_main_dataset.py "
                f"{phenotype} {args.data_field_id} '{args.unit}' "
            )
            if not args.categorical_covars:
                shell(base_command)
            else:
                shell(
                    base_command + " --categorical-covars "
                    + " ".join(f'{name},{ID}' for name, ID in args.categorical_covars) + " "
                )
        else:
            raise ValueError(f"Couldn't identify phenotype {phenotype}")

rule plot_phenotype_by_sex:
    input:
        "traits/shared_covars/shared_covars.npy",
        "traits/phenotypes/{phenotype}.npy",
        "traits/phenotypes/{phenotype}_unit.txt"
    output:
        "traits/phenotypes/{phenotype}_distribution_by_sex.png"
    resources:
        time='24:00:00',
        threads=5,
        mem_gb=10
    shell:
        'traits/plot_phenotype.py {wildcards.phenotype} sex'

rule plot_phenotype_by_age:
    input:
        "traits/phenotypes/{phenotype}.npy",
        "traits/phenotypes/{phenotype}_unit.txt"
    output:
        "traits/phenotypes/{phenotype}_distribution_by_age.png"
    resources:
        time='24:00:00',
        threads=15,
        mem_gb=30
    shell:
        'traits/plot_phenotype.py {wildcards.phenotype} age'

rule subset_samples_for_phenotype:
    input:
        "traits/phenotypes/{phenotype}.npy",
        expand("sample_qc/common_filters/keep"),
        expand("sample_qc/common_filters/remove"),
        "misc_data/ukbgene/ukb46122_rel_s488282.dat"
    output:
        protected("sample_qc/runs/{phenotype}/README.txt"),
        protected("sample_qc/runs/{phenotype}/combined_unrelated.sample")
    shadow: 'minimal'
    resources:
        time='24:00:00'
    shell:
        'shadow_dir=$(pwd) ; cd $UKB ; export UKB=${{shadow_dir}} ; '
        'sample_qc/scripts/combine.py {wildcards.phenotype} && '
        'PHEN={wildcards.phenotype} sample_qc/scripts/test_combine.sh && '
        'sample_qc/scripts/unrelated_individuals.py {wildcards.phenotype} && '
        'sample_qc/scripts/verify_unrelatedness.py {wildcards.phenotype}'

rule transform_phenotype_subset:
    input:
        "traits/phenotypes/{phenotype}.npy",
        "sample_qc/runs/{phenotype}/combined_unrelated.sample"
    output:
        protected("traits/subset_transformed_phenotypes/{phenotype}_README.txt"),
        protected("traits/subset_transformed_phenotypes/{phenotype}.npy")
    resources:
        time='00:05:00'
    shell:
        'traits/transform_traits.py {wildcards.phenotype}'

rule plot_str_locus:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        'traits/phenotypes/{phenotype}.npy',
        'traits/subset_transformed_phenotypes/{phenotype}.npy'
    output:
        'association/locus_plots/{phenotype}/{chrom}_{pos,[0-9]+}{transform,(_.*)?}.png',
        'association/locus_plots/{phenotype}/{chrom}_{pos,[0-9]+}{transform,(_.*)?}.csv'
    resources:
        time='00:30:00'
    run:
        if wildcards.transform == '':
            transform_step = 'original'
        elif wildcards.transform == '_rin':
            transform_step = 'rin'
        else:
            raise ValueError()
        shell(
            f'association/plot_loci.py {str_imputation_run_name} '
            f'{wildcards.phenotype} {transform_step} '
            f'{wildcards.chrom}:{wildcards.pos} '
        )

def concatenate_csvs(output_file, input_files):
    with open(output_file + '.temp', 'w') as outfile:
        first = True
        for f in input_files:
            with open(f) as infile:
                first_line = True
                for line in infile:
                    if first_line and first:
                        first = False
                        first_line = False
                        outfile.write(line)
                        continue
                    elif first_line and not first:
                        first_line = False
                        continue
                    outfile.write(line)
    shutil.move(output_file + '.temp', output_file)

def regions(region_len):
    regions = []
    for chrom in range(1, 23):
        chr_len = chr_lens[chrom-1]
        for start in range(1, chr_len, region_len):
            if start + region_len - 1 > chr_len:
                end = chr_len
            else:
                end = start + region_len - 1
            regions.append(f'{chrom}_{start}_{end}')
    return regions

rule write_my_imputed_snp_gwas_readme:
    output:
        protected('association/results/{phenotype}/my_imputed_snp/README.txt'),
        protected('association/results/{phenotype}/my_imputed_snp/time.stamp')
    resources:
        time='00:05:00'
    shell:
        'touch association/results/{wildcards.phenotype}/my_imputed_snp/time.stamp && '
        'association/my_regional_gwas.py imputed-snps {wildcards.phenotype} --readme'

rule run_regional_my_imputed_snp_gwas:
    input:
        "traits/phenotypes/{phenotype}.npy",
        'association/results/{phenotype}/my_imputed_snp/time.stamp',
        "traits/subset_transformed_phenotypes/{phenotype}.npy"
    output:
        "association/results/{phenotype}/my_imputed_snp/batches/chr{chr}_{start}_{end}.tab"
    resources:
        time='12:00:00',
        mem_gb=9,
        threads=4
    shell:
        'association/my_regional_gwas.py imputed-snps {wildcards.phenotype} '
        '--region {wildcards.chr}:{wildcards.start}-{wildcards.end}'

rule concatenate_my_imputed_snp_gwas_chr21:
    input:
        lambda wildcards:
            [f'association/results/{wildcards.phenotype}/my_imputed_snp/batches/chr{region}.tab' for
             region in regions(int(1e5)) if region[:3] == '21_']
    output:
        protected('association/results/{phenotype}/my_imputed_snp/chr21_results.tab')
    resources:
        time='04:00:00'
    run:
        concatenate_csvs(output[0], input)

str_imputation_run_name = 'first_pass'

rule write_my_str_gwas_readme:
    output:
        protected('association/results/{phenotype}/my_str/README.txt'),
        protected('association/results/{phenotype}/my_str/time.stamp')
    resources:
        time='00:05:00'
    shell:
        'touch association/results/{wildcards.phenotype}/my_str/time.stamp && '
        'association/my_regional_gwas.py strs {wildcards.phenotype} --readme '
        f'--imputation-run-name {str_imputation_run_name} '

rule run_regional_my_str_gwas:
    input:
        "traits/shared_covars/shared_covars.npy",
        "traits/phenotypes/{phenotype}.npy",
        'association/results/{phenotype}/my_str/time.stamp',
        "traits/subset_transformed_phenotypes/{phenotype}.npy",
        f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chr}}.vcf.gz",
        f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chr}}.vcf.gz.tbi"
    output:
        temporary("association/results/{phenotype}/my_str/batches/chr{chr}_{start}_{end}.tab")
    resources:
        time='12:00:00',
        mem_gb=9,
        threads=4
    shell:
        'association/my_regional_gwas.py strs {wildcards.phenotype} '
        '--region {wildcards.chr}:{wildcards.start}-{wildcards.end} '
        f'--imputation-run-name {str_imputation_run_name} '

rule concatenate_my_str_gwas:
    input:
        lambda wildcards:
            [f'association/results/{wildcards.phenotype}/my_str/batches/chr{region}.tab' for
             region in regions(int(1e7))]
    output:
        protected('association/results/{phenotype}/my_str/results.tab')
    resources:
        time='04:00:00'
    run:
        concatenate_csvs(output[0], input)

rule prep_plink_input:
    input:
        'traits/shared_covars/shared_covars.npy',
        'traits/shared_covars/covar_names.txt',
        'traits/subset_transformed_phenotypes/{phenotype}.npy',
        'traits/phenotypes/{phenotype}_covar_names.txt'
    output:
        'association/results/{phenotype}/plink_snp/input/transformed_phenotype_and_covars.tab'
    resources:
        time='00:30:00'
    shell:
        'association/prep_plink_input.py {wildcards.phenotype}'

rule timestamp_plink_run:
    output:
        'association/results/{phenotype}/plink_snp/time.stamp'
    resources:
        time='00:05:00'
    shell:
        'touch association/results/{wildcards.phenotype}/plink_snp/time.stamp'

rule run_plink_gwas:
    input:
        'association/results/{phenotype}/plink_snp/input/transformed_phenotype_and_covars.tab',
        'association/results/{phenotype}/plink_snp/time.stamp'
    output:
        temporary('association/results/{phenotype}/plink_snp/chrs/chr{chrom}/plink2.rin_{phenotype}.glm.linear.done')
    resources:
        time='06:00:00',
        threads=28,
        mem_gb=56
    shell:
        'PHENOTYPE={wildcards.phenotype} CHROM={wildcards.chrom} association/plink_association.sh'

rule concatenate_plink_gwas:
    input:
        lambda wildcards:
            [f'association/results/{wildcards.phenotype}/plink_snp/chrs/chr{chrom}/plink2.rin_{wildcards.phenotype}.glm.linear.done' for
             chrom in range(1, 23)]
    output:
        protected('association/results/{phenotype}/plink_snp/results.tab')
    resources:
        time='04:00:00'
    run:
        concatenate_csvs(output[0], input)

rule prep_conditional_input:
    output:
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP.npy',
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP_varnames.txt',
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP_README.txt'
    resources:
        time='00:30:00'
    run:
        command = 'association/prep_conditional_inputs.py {wildcards.phenotype} {wildcards.chr} '
        if wildcards.STRs:
            command += f'--imputation-run-name {str_imputation_run_name} --STRs ' 
            command += wildcards.STRs.replace('_', ' ') + ' '
        if wildcards.imputed_SNPs:
            command += '--imputed-SNPs '
            command += wildcards.imputed_SNPs.replace('_', ' ') + ' '
        shell(command)

rule run_conditional_my_str_gwas:
    input:
        "traits/phenotypes/{phenotype}.npy",
        "traits/subset_transformed_phenotypes/{phenotype}.npy",
        f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chr}}.vcf.gz",
        f"str_imputed/runs/{str_imputation_run_name}/vcfs/annotated_strs/chr{{chr}}.vcf.gz.tbi",
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs}__ISNP{imputed_SNPs}__ASNP.npy',
    output:
        'association/results/{phenotype}/my_str_conditional/chr{chr}_{start}_{end}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP.tab'
    resources:
        time='12:00:00',
        mem_gb=9,
        threads=4
    shell:
        'association/my_regional_gwas.py strs {wildcards.phenotype} '
        '--region {wildcards.chr}:{wildcards.start}-{wildcards.end} '
        f'--imputation-run-name {str_imputation_run_name} '
        '--conditional STR{wildcards.STRs}__ISNP{wildcards.imputed_SNPs}__ASNP'

rule prep_conditional_plink_input:
    input:
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs}__ISNP{imputed_SNPs}__ASNP.npy',
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs}__ISNP{imputed_SNPs}__ASNP_varnames.txt',
        'traits/shared_covars/shared_covars.npy',
        'traits/shared_covars/covar_names.txt',
        'traits/subset_transformed_phenotypes/{phenotype}.npy',
        'traits/phenotypes/{phenotype}_covar_names.txt'
    output:
        'association/results/{phenotype}/conditional_inputs/chr{chr}_STR{STRs,.*}__ISNP{imputed_SNPs,.*}__ASNP_plink.tab'
    resources:
        time='00:30:00'
    shell:
        'association/prep_plink_input.py {wildcards.phenotype} --conditional chr{wildcards.chr}_STR{wildcards.STRs}__ISNP{wildcards.imputed_SNPs}__ASNP'

rule run_conditional_plink_gwas:
    input:
        'association/results/{phenotype}/conditional_inputs/chr{chrom}_STR{STRs}__ISNP{ISNPs}__ASNP_plink.tab'
    output:
        'association/results/{phenotype}/plink_snp_conditional/chr{chrom}_{start}_{end}_STR{STRs,.*}__ISNP{ISNPs,.*}__ASNP/plink2.rin_{phenotype}.glm.linear.done'
    resources:
        time='24:00:00',
        mem_gb=110,
        threads=28
    shell:
        'PHENOTYPE={wildcards.phenotype} CHROM={wildcards.chrom} '
        'CONDITIONAL=STR{wildcards.STRs}__ISNP{wildcards.ISNPs}__ASNP '
        'START={wildcards.start} END={wildcards.end} '
        'association/plink_association.sh'

INTERACTIVE_MANHATTAN_GWAS_THRESHOLD = 0.00005

def subset_gwas_results(
        input_file,
        output_file,
        p_val_col,
        threshold = INTERACTIVE_MANHATTAN_GWAS_THRESHOLD):
    shell(
        f"head -n 1 {input_file} > {output_file}.temp && "
        "awk '{{ if ($" + str(p_val_col) + " < " + str(threshold) + ") {{ print }} }}' "
        f"{input_file} >> {output_file}.temp && "
        f"mv {output_file}.temp {output_file} "
    )


rule subset_my_gwas_results:
    input:
        'association/results/{phenotype}/my_{gwas_type}/results.tab'
    output:
        'association/plots/input/{phenotype}/my_{gwas_type}_results.tab'
    resources:
        time='01:00:00'
    run:
        subset_gwas_results(
             f"association/results/{wildcards.phenotype}/my_{wildcards.gwas_type}/results.tab",
             f"association/plots/input/{wildcards.phenotype}/my_{wildcards.gwas_type}_results.tab",
             5
         )

rule subset_plink_gwas_results:
    input:
        'association/results/{phenotype}/plink_snp/results.tab'
    output:
        'association/plots/input/{phenotype}/plink_snp_results.tab'
    resources:
        time='08:00:00'
    run:
        out = shell(
            "tail -n +2 {input[0]} | grep -v -P '\.$' | grep -v 'CONST_OMITTED_ALLELE' ; "
            'if (( $? > 1 )) ; then exit 1 ; fi ',
            iterable=True
        )
        for line in out:
            print(line)
            raise ValueError("plink association failed with unexpected error code")

        subset_gwas_results(
             f'{input[0]}',
             f'{output[0]}',
             14
        )

rule append_mfi_to_subsetted_plink_results:
    input:
        'association/plots/input/{phenotype}/plink_snp_results.tab'
    output:
        'association/plots/input/{phenotype}/plink_snp_results_with_mfi.npy'
    resources:
        time='01:00:00',
        mem_gb = 50
    shell:
        'association/append_mfi_to_plink_snp.py {input[0]} {output[0]}'

rule append_mfi_to_conditional_plink_results:
    input:
        'association/results/{phenotype}/plink_snp_conditional/{condition}/plink2.rin_{phenotype}.glm.linear.done'
    output:
        'association/plots/input/{phenotype}/plink_snp_conditional_{condition}_results_with_mfi.npy'
    resources:
        time='01:00:00',
        mem_gb = 50
    shell:
        'association/append_mfi_to_plink_snp.py {input[0]} {output[0]}'

rule compare_my_to_plink_gwas:
    input:
        "traits/phenotypes/height_unit.txt",
        'association/plots/input/height/my_imputed_snp_chr21_results.tab',
        'association/plots/input/height/plink_snp_results_with_mfi.npy'
    output:
        'association/plots/height_my_imputed_snp_vs_plink.{ext}'
    resources:
        time='00:30:00',
        mem_gb=50
    shell:
        'association/interactive_manhattan_plots.py {wildcards.ext} --my-plink-comparison'

rule manhattan:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        'association/plots/input/{phenotype}/my_str_results.tab',
        'association/plots/input/{phenotype}/plink_snp_results_with_mfi.npy'
    output:
        'association/plots/{phenotype}_manhattan.{ext}'
    resources:
        time='00:30:00',
        mem_gb=50
    shell:
        'association/interactive_manhattan_plots.py {wildcards.ext} '
        '--phenotype {wildcards.phenotype}'

rule region_manhattan:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        'association/plots/input/{phenotype}/my_str_results.tab',
        'association/plots/input/{phenotype}/plink_snp_results_with_mfi.npy'
    output:
        'association/plots/{phenotype}_manhattan_chr{chrom}_{start,[^_]+}_{end,[^_]+}.{ext}'
    resources:
        time='00:30:00',
        mem_gb=50
    shell:
        'association/interactive_manhattan_plots.py {wildcards.ext} '
        '--phenotype {wildcards.phenotype} '
        '--chrom {wildcards.chrom} '
        '--start {wildcards.start} '
        '--end {wildcards.end} '

rule manhattan_conditional:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        'association/plots/input/{phenotype}/my_str_results.tab',
        'association/results/{phenotype}/my_str_conditional/chr{condition}.tab',
        'association/plots/input/{phenotype}/plink_snp_results_with_mfi.npy',
        'association/plots/input/{phenotype}/plink_snp_conditional_chr{condition}_results_with_mfi.npy'
    output:
        'association/plots/{phenotype}_manhattan_chr{condition}.{ext}'
    resources:
        time='00:30:00',
        mem_gb=50
    shell:
        'association/interactive_manhattan_plots.py {wildcards.ext} '
        '--phenotype {wildcards.phenotype} '
        '--condition chr{wildcards.condition} '

checkpoint clump_results:
    input:
        'association/results/{phenotype}/my_str/results.tab',
        'association/results/{phenotype}/plink_snp/results.tab'
    output:
        protected('finemapping/signal_clumps/{phenotype}.tab'),
        protected('finemapping/signal_clumps/{phenotype}_README.txt')
    resources:
        time='00:30:00',
        mem_gb = 10
    shell:
        'finemapping/clump.py {wildcards.phenotype}'

checkpoint finemap_write_input_variants:
    input:
        'association/results/{phenotype}/my_str/results.tab',
        'association/results/{phenotype}/plink_snp/results.tab',
        'finemapping/str_imp_snp_overlaps/chr{chrom}_to_filter.tab'
    output:
        protected('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/README.txt'),
        protected('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_input.z'),
    resources:
        time = '00:30:00'
    shell:
        'finemapping/finemap_write_input_variants.py '
        '{wildcards.phenotype} {wildcards.chrom} {wildcards.start} '
        '{wildcards.end} '

rule finemap_load_gts:
    input:
        'sample_qc/runs/{phenotype}/combined_unrelated.sample',
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_input.z'
    output:
        protected('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_input.master'),
        temporary('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/gts.h5')
    resources:
        mem_gb = 6,
        time = '02:00:00'
    shell:
        'finemapping/finemap_load_gts.py '
        '{wildcards.phenotype} {wildcards.chrom} {wildcards.start} '
        '{wildcards.end} '
        f'{str_imputation_run_name} '

def finemap_corrs_time(wildcards, attempt):
    if attempt == 1:
        return '01:00:00'
    else:
        return '47:30:00'

rule finemap_calc_corrs:
    input:
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/gts.h5'
    output:
        temporary('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/lds.h5')
    resources:
        time = finemap_corrs_time,
        mem_gb = 4
    shell:
        'finemapping/finemap_calc_corrs.py '
        '{wildcards.phenotype} {wildcards.chrom} {wildcards.start} '
        '{wildcards.end} '

rule finemap_write_corrs_and_run:
    input:
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/README.txt',
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_input.z',
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_input.master',
        'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/lds.h5'
    output:
        temporary('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/all_variants.ld'),
        protected('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_output.snp'),
        protected('finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}/finemap_output.config')
    resources:
        time = finemap_corrs_time,
        mem_gb = 8,
        threads = 4
    shell:
        'finemapping/finemap_write_corrs_and_run.py '
        '{wildcards.phenotype} {wildcards.chrom} {wildcards.start} '
        '{wildcards.end} '

def collect_finemap_output_per_region_with_strs(wildcards):
    phenotype = wildcards.phenotype
    files = []
    # make sure we've loaded all input variants for all regions
    checkpoints.clump_results.get(phenotype=phenotype)
    signals = []
    with open(f'finemapping/signal_clumps/{phenotype}.tab') as signal_file:
        next(signal_file)
        for line in signal_file:
            chrom, start, stop = line.split()
            signals.append((chrom, start, stop))

    target_files = [] 
    for chrom, start, end in signals:
        checkpoints.finemap_write_input_variants.get(
            phenotype=phenotype, chrom=chrom, start=start, end=end
        )
        region_dir = \
            f'finemapping/finemap_results/{phenotype}/{chrom}_{start}_{end}'
        if os.path.exists(f'{region_dir}/no_strs'):
            continue
        else:
            target_files.append(f'{region_dir}/finemap_output.snp')
    return target_files

rule run_finemap_phenotype:
    input:
        collect_finemap_output_per_region_with_strs
    output:
        'finemapping/finemap_results/{phenotype}/all_signals_done'
    resources:
        time='00:01:00'
    shell:
        'touch finemapping/finemap_results/{wildcards.phenotype}/all_signals_done'

rule summarize_finemap_output:
    input:
        'finemapping/finemap_results/{phenotype}/all_signals_done'
    output:
        'finemapping/finemap_results/{phenotype}/summary/summary.txt',
        'finemapping/finemap_results/{phenotype}/summary/all_STR_contribs.tab'
    resources:
        time='00:30:00'
    shell:
        'finemapping/summarize_finemap_output.py {wildcards.phenotype} '

rule manhattan_finemap:
    input:
        "traits/phenotypes/{phenotype}_unit.txt",
        'association/plots/input/{phenotype}/my_str_results.tab',
        'association/plots/input/{phenotype}/plink_snp_results_with_mfi.npy',
        'finemapping/finemap_results/{phenotype}/all_signals_done'
    output:
        'association/plots/{phenotype}_manhattan_FINEMAP.{ext}'
    resources:
        time='00:30:00',
        mem_gb=50
    shell:
        'association/interactive_manhattan_plots.py {wildcards.ext} '
        '--phenotype {wildcards.phenotype} --finemap-signals'

rule sort_gencode:
    input:
        'misc_data/gencode/gencode.v38lift37.annotation.gff3'
    output:
        temporary('misc_data/gencode/gencode.v38lift37.annotation.without_chr.gff3'),
        'misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.gff3'
    resources:
        time='00:30:00'
    shell:
        "sed -e 's/^chr//' {input[0]} > {output[0]} ; "
        'bedtools sort -i {output[0]} > {output[1]} '

rule gencode_extract_feature:
    input:
        'misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.gff3'
    output:
        'misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.{feature_type}.gff3'
    resources:
        time='00:30:00'
    shell:
        "awk '{{ if ($3 == \"{wildcards.feature_type}\") {{ print $0 ; }} }}' {input[0]} > {output[0]} "

cut_str_genocde_command = "cut -d $'\\t' -f 1-3,11-13,15- "

rule str_closest_feature:
    input:
        vcf='snpstr/info_field/chr{chrom}.vcf.gz',
        index_file='snpstr/info_field/chr{chrom}.vcf.gz.tbi',
        gencode_feature='misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.{feature_type}.gff3'
    output:
        'side_analyses/str_annotations/closest_{feature_type}/chr{chrom}.tab'
    resources:
        time='00:30:00'
    shell:
        ('bedtools closest -d -a {input.vcf} -b {input.gencode_feature} | ' +
         cut_str_genocde_command +
         '> {output[0]}')

rule str_nearby_features:
    input:
        vcf='snpstr/info_field/chr{chrom}.vcf.gz',
        index_file='snpstr/info_field/chr{chrom}.vcf.gz.tbi',
        gencode_feature='misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.{feature_type}.gff3'
    output:
        'side_analyses/str_annotations/nearby_{feature_type}_d_{distance}/chr{chrom}.tab'
    resources:
        time='00:30:00'
    shell:
        ('bedtools window -w {wildcards.distance} -a {input.vcf} -b {input.gencode_feature} | ' +
         cut_str_genocde_command +
         '> {output[0]}')

rule str_intersect_features:
    input:
        vcf='snpstr/info_field/chr{chrom}.vcf.gz',
        index_file='snpstr/info_field/chr{chrom}.vcf.gz.tbi',
        gencode_feature='misc_data/gencode/gencode.v38lift37.annotation.without_chr.sorted.{feature_type}.gff3'
    output:
        'side_analyses/str_annotations/intersects_{feature_type}/chr{chrom}.tab'
    resources:
        time='00:30:00'
    shell:
        ('bedtools intersect -wo -a {input.vcf} -b {input.gencode_feature} | ' +
        cut_str_genocde_command + 
        '> {output[0]}')

def chr_expand(string):
    return [string.replace('CHR', str(chrom)) for chrom in range(1, 23)]

checkpoint produce_summary_table:
    input:
        'association/results/{phenotype}/my_str/results.tab',
        'finemapping/finemap_results/{phenotype}/summary/all_STR_contribs.tab',
        chr_expand('side_analyses/str_annotations/closest_gene/chrCHR.tab'),
        #chr_expand('side_analyses/str_annotations/closest_transcript/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/nearby_exon_d_1000/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/nearby_gene_d_100000/chrCHR.tab'),
        #chr_expand('side_analyses/str_annotations/nearby_transcript_d_1000000/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_gene/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_exon/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_CDS/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_five_prime_UTR/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_three_prime_UTR/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_UTR/chrCHR.tab'),
        chr_expand('side_analyses/str_annotations/intersects_transcript/chrCHR.tab')
    output:
        'finemapping/summary/{phenotype}_table_README.txt',
        'finemapping/summary/{phenotype}_table.tab'
    resources:
        time='01:00:00',
        mem_gb = 50
    run:
        STRs = ''
        first = True
        for STR in pheno_args[wildcards.phenotype].previous_STR_findings:
            if not first:
                STRs += ' '
            first = False
            STRs += STR
        command = 'finemapping/collate_strong_associations.py ' + wildcards.phenotype
        if STRs:
            command += ' --previous-STR-findings ' + STRs
        shell(command)

rule graph_finemap_output:
    input:
        'finemapping/summary/{phenotype}_table.tab'
    output:
        'finemapping/finemap_results/{phenotype}/summary/signal_strengths.html'
    resources:
        time='00:30:00',
        mem_gb = 50
    shell:
        'finemapping/plot_finemap_association_strengths.py {wildcards.phenotype}'

def conditional_plots_sig_strs(wildcards):
    checkpoints.produce_summary_table.get(phenotype=wildcards.phenotype)
    phenotype = wildcards.phenotype
    results = utils.df_to_recarray(pd.read_csv(
        f'finemapping/summary/{phenotype}_table.tab',
        header=0,
        delimiter='\t'
    ))
    results = results[(results['pcausal'] >= 0.5) | results['previously_reported_association']]
    outfiles = []
    for result in results:
        outfiles.append(
            f'association/plots/{phenotype}_manhattan_chr{result["signal_region"]}.svg'
        )
        outfiles.append(
            'association/plots/{phenotype}_manhattan_'
            f'chr{result["signal_region"]}_STR_{result["SNPSTR_start_pos"]}__ISNP__ASNP.svg'
        )
    return outfiles
     
rule generate_unconditional_and_conditional_STR_manhattans:
    input:
        conditional_plots_sig_strs
    output:
        'finemapping/summary/{phenotype}_conditional_STR_manhattans.done'
    resources:
        time='00:05:00'
    shell:
        'touch finemapping/summary/{wildcards.phenotype}_conditional_STR_manhattans.done'

rule gather_all_summaries:
    input:
        table_readme='finemapping/summary/{phenotype}_table_README.txt',
        table='finemapping/summary/{phenotype}_table.tab',
        signal_strengths='finemapping/finemap_results/{phenotype}/summary/signal_strengths.html',
        manhattan='association/plots/{phenotype}_manhattan_FINEMAP.html',
        conditional_plots=conditional_plots_sig_strs
    output:
        directory('export/{phenotype}')
    resources:
        time='00:10:00'
    shell:
        'mkdir -p {output[0]} ; '
        'cd export/{wildcards.phenotype} ; '
        'for file in {input.manhattan} {input.signal_strengths} {input.table} {input.table_readme} ; do '
        '    ln -s ../../$file ; '
        'done ; '
        'mkdir region_plots ; '
        'cd region_plots ; '
        'for file in {input.conditional_plots} ; do '
        '    ln -s ../../../$file ; '
        'done '

